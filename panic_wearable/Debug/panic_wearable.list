
panic_wearable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f64  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080090f8  080090f8  0000a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009234  08009234  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009234  08009234  0000a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800923c  0800923c  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800923c  0800923c  0000a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009240  08009240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009244  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c4  20000080  080092c4  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004744  080092c4  0000b744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d32  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003665  00000000  00000000  00021de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00025448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010cc  00000000  00000000  000269e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b017  00000000  00000000  00027aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b094  00000000  00000000  00042ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c74  00000000  00000000  0005db57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe7cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006114  00000000  00000000  000fe810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00104924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080090e0 	.word	0x080090e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	080090e0 	.word	0x080090e0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SELECT>:
/***************************************
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ce:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <SELECT+0x1c>)
 80004d0:	f002 fe16 	bl	8003100 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fd17 	bl	8001f08 <HAL_Delay>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020400 	.word	0x40020400

080004e4 <DESELECT>:
/* slave deselect */
static void DESELECT(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ee:	4804      	ldr	r0, [pc, #16]	@ (8000500 <DESELECT+0x1c>)
 80004f0:	f002 fe06 	bl	8003100 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f001 fd07 	bl	8001f08 <HAL_Delay>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40020400 	.word	0x40020400

08000504 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800050e:	bf00      	nop
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <SPI_TxByte+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	2b02      	cmp	r3, #2
 800051c:	d1f8      	bne.n	8000510 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800051e:	1df9      	adds	r1, r7, #7
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	2201      	movs	r2, #1
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <SPI_TxByte+0x30>)
 8000526:	f004 fc16 	bl	8004d56 <HAL_SPI_Transmit>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000190 	.word	0x20000190

08000538 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 8000544:	bf00      	nop
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <SPI_TxBuffer+0x30>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	2b02      	cmp	r3, #2
 8000552:	d1f8      	bne.n	8000546 <SPI_TxBuffer+0xe>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000554:	887a      	ldrh	r2, [r7, #2]
 8000556:	2364      	movs	r3, #100	@ 0x64
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4803      	ldr	r0, [pc, #12]	@ (8000568 <SPI_TxBuffer+0x30>)
 800055c:	f004 fbfb 	bl	8004d56 <HAL_SPI_Transmit>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000190 	.word	0x20000190

0800056c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000572:	23ff      	movs	r3, #255	@ 0xff
 8000574:	71fb      	strb	r3, [r7, #7]

	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 8000576:	bf00      	nop
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <SPI_RxByte+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	2b02      	cmp	r3, #2
 8000584:	d1f8      	bne.n	8000578 <SPI_RxByte+0xc>
		;
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000586:	1dba      	adds	r2, r7, #6
 8000588:	1df9      	adds	r1, r7, #7
 800058a:	2364      	movs	r3, #100	@ 0x64
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <SPI_RxByte+0x34>)
 8000592:	f004 fd24 	bl	8004fde <HAL_SPI_TransmitReceive>

	return data;
 8000596:	79bb      	ldrb	r3, [r7, #6]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000190 	.word	0x20000190

080005a4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005ac:	f7ff ffde 	bl	800056c <SPI_RxByte>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	701a      	strb	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <SD_ReadyWait+0x30>)
 80005c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005cc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005ce:	f7ff ffcd 	bl	800056c <SPI_RxByte>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2bff      	cmp	r3, #255	@ 0xff
 80005da:	d004      	beq.n	80005e6 <SD_ReadyWait+0x26>
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <SD_ReadyWait+0x30>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f3      	bne.n	80005ce <SD_ReadyWait+0xe>

	return res;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200045b3 	.word	0x200045b3

080005f4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005fa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005fe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000600:	f7ff ff70 	bl	80004e4 <DESELECT>
	for (int i = 0; i < 10; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e005      	b.n	8000616 <SD_PowerOn+0x22>
		SPI_TxByte(0xFF);
 800060a:	20ff      	movs	r0, #255	@ 0xff
 800060c:	f7ff ff7a 	bl	8000504 <SPI_TxByte>
	for (int i = 0; i < 10; i++) {
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3301      	adds	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b09      	cmp	r3, #9
 800061a:	ddf6      	ble.n	800060a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800061c:	f7ff ff52 	bl	80004c4 <SELECT>

	/* make idle state */
	args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 8000620:	2340      	movs	r3, #64	@ 0x40
 8000622:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95; /* CRC */
 8000634:	2395      	movs	r3, #149	@ 0x95
 8000636:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000638:	463b      	mov	r3, r7
 800063a:	2106      	movs	r1, #6
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff7b 	bl	8000538 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt) {
 8000642:	e002      	b.n	800064a <SD_PowerOn+0x56>
		cnt--;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3b01      	subs	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt) {
 800064a:	f7ff ff8f 	bl	800056c <SPI_RxByte>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d002      	beq.n	800065a <SD_PowerOn+0x66>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f4      	bne.n	8000644 <SD_PowerOn+0x50>
	}

	DESELECT();
 800065a:	f7ff ff43 	bl	80004e4 <DESELECT>
	SPI_TxByte(0XFF);
 800065e:	20ff      	movs	r0, #255	@ 0xff
 8000660:	f7ff ff50 	bl	8000504 <SPI_TxByte>

	PowerFlag = 1;
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <SD_PowerOn+0x80>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000009d 	.word	0x2000009d

08000678 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <SD_PowerOff+0x14>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000009d 	.word	0x2000009d

08000690 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) {
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <SD_CheckPower+0x14>)
 8000696:	781b      	ldrb	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2000009d 	.word	0x2000009d

080006a8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <SD_RxDataBlock+0x5c>)
 80006b4:	22c8      	movs	r2, #200	@ 0xc8
 80006b6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006b8:	f7ff ff58 	bl	800056c <SPI_RxByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2bff      	cmp	r3, #255	@ 0xff
 80006c4:	d104      	bne.n	80006d0 <SD_RxDataBlock+0x28>
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <SD_RxDataBlock+0x5c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f3      	bne.n	80006b8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006d4:	d001      	beq.n	80006da <SD_RxDataBlock+0x32>
		return FALSE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e00f      	b.n	80006fa <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff5f 	bl	80005a4 <SPI_RxBytePtr>
	} while (len--);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	603a      	str	r2, [r7, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f4      	bne.n	80006da <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80006f0:	f7ff ff3c 	bl	800056c <SPI_RxByte>
	SPI_RxByte();
 80006f4:	f7ff ff3a 	bl	800056c <SPI_RxByte>

	return TRUE;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200045b2 	.word	0x200045b2

08000708 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 8000718:	f7ff ff52 	bl	80005c0 <SD_ReadyWait>
 800071c:	4603      	mov	r3, r0
 800071e:	2bff      	cmp	r3, #255	@ 0xff
 8000720:	d001      	beq.n	8000726 <SD_TxDataBlock+0x1e>
		return FALSE;
 8000722:	2300      	movs	r3, #0
 8000724:	e02f      	b.n	8000786 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff feeb 	bl	8000504 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD) {
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2bfd      	cmp	r3, #253	@ 0xfd
 8000732:	d020      	beq.n	8000776 <SD_TxDataBlock+0x6e>
		SPI_TxBuffer((uint8_t*) buff, 512);
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fefd 	bl	8000538 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800073e:	f7ff ff15 	bl	800056c <SPI_RxByte>
		SPI_RxByte();
 8000742:	f7ff ff13 	bl	800056c <SPI_RxByte>

		/* receive response */
		while (i <= 64) {
 8000746:	e00b      	b.n	8000760 <SD_TxDataBlock+0x58>
			resp = SPI_RxByte();
 8000748:	f7ff ff10 	bl	800056c <SPI_RxByte>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	2b05      	cmp	r3, #5
 8000758:	d006      	beq.n	8000768 <SD_TxDataBlock+0x60>
				break;
			i++;
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	3301      	adds	r3, #1
 800075e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64) {
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	2b40      	cmp	r3, #64	@ 0x40
 8000764:	d9f0      	bls.n	8000748 <SD_TxDataBlock+0x40>
 8000766:	e000      	b.n	800076a <SD_TxDataBlock+0x62>
				break;
 8000768:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0)
 800076a:	bf00      	nop
 800076c:	f7ff fefe 	bl	800056c <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0fa      	beq.n	800076c <SD_TxDataBlock+0x64>
			;
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2b05      	cmp	r3, #5
 800077e:	d101      	bne.n	8000784 <SD_TxDataBlock+0x7c>
		return TRUE;
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	6039      	str	r1, [r7, #0]
 8000798:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800079a:	f7ff ff11 	bl	80005c0 <SD_ReadyWait>
 800079e:	4603      	mov	r3, r0
 80007a0:	2bff      	cmp	r3, #255	@ 0xff
 80007a2:	d001      	beq.n	80007a8 <SD_SendCmd+0x1a>
		return 0xFF;
 80007a4:	23ff      	movs	r3, #255	@ 0xff
 80007a6:	e042      	b.n	800082e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); /* Command */
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feaa 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 24)); /* Argument[31..24] */
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fea4 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 16)); /* Argument[23..16] */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe9e 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 8)); /* Argument[15..8] */
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe98 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t) arg); /* Argument[7..0] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe93 	bl	8000504 <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b40      	cmp	r3, #64	@ 0x40
 80007e2:	d102      	bne.n	80007ea <SD_SendCmd+0x5c>
		crc = 0x95; /* CRC for CMD0(0) */
 80007e4:	2395      	movs	r3, #149	@ 0x95
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e007      	b.n	80007fa <SD_SendCmd+0x6c>
	else if (cmd == CMD8)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b48      	cmp	r3, #72	@ 0x48
 80007ee:	d102      	bne.n	80007f6 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 80007f0:	2387      	movs	r3, #135	@ 0x87
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e001      	b.n	80007fa <SD_SendCmd+0x6c>
	else
		crc = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe81 	bl	8000504 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b4c      	cmp	r3, #76	@ 0x4c
 8000806:	d101      	bne.n	800080c <SD_SendCmd+0x7e>
		SPI_RxByte();
 8000808:	f7ff feb0 	bl	800056c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800080c:	230a      	movs	r3, #10
 800080e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000810:	f7ff feac 	bl	800056c <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da05      	bge.n	800082c <SD_SendCmd+0x9e>
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	3b01      	subs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <SD_SendCmd+0x82>

	return res;
 800082c:	7b7b      	ldrb	r3, [r7, #13]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) {
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SD_disk_initialize+0x14>
		return STA_NOINIT;
 8000848:	2301      	movs	r3, #1
 800084a:	e0d6      	b.n	80009fa <SD_disk_initialize+0x1c2>

	/* no disk */
	if (Stat & STA_NODISK)
 800084c:	4b6d      	ldr	r3, [pc, #436]	@ (8000a04 <SD_disk_initialize+0x1cc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <SD_disk_initialize+0x2a>
		return Stat;
 800085a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <SD_disk_initialize+0x1cc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	e0cb      	b.n	80009fa <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000862:	f7ff fec7 	bl	80005f4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000866:	f7ff fe2d 	bl	80004c4 <SELECT>

	/* check disk type */
	type = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1) {
 800086e:	2100      	movs	r1, #0
 8000870:	2040      	movs	r0, #64	@ 0x40
 8000872:	f7ff ff8c 	bl	800078e <SD_SendCmd>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80a6 	bne.w	80009ca <SD_disk_initialize+0x192>
		/* timeout 1 sec */
		Timer1 = 1000;
 800087e:	4b62      	ldr	r3, [pc, #392]	@ (8000a08 <SD_disk_initialize+0x1d0>)
 8000880:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000884:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1) {
 8000886:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800088a:	2048      	movs	r0, #72	@ 0x48
 800088c:	f7ff ff7f 	bl	800078e <SD_SendCmd>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d158      	bne.n	8000948 <SD_disk_initialize+0x110>
			/* operation condition register */
			for (n = 0; n < 4; n++) {
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e00c      	b.n	80008b6 <SD_disk_initialize+0x7e>
				ocr[n] = SPI_RxByte();
 800089c:	7bfc      	ldrb	r4, [r7, #15]
 800089e:	f7ff fe65 	bl	800056c <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f104 0310 	add.w	r3, r4, #16
 80008aa:	443b      	add	r3, r7
 80008ac:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++) {
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d9ef      	bls.n	800089c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	f040 8083 	bne.w	80009ca <SD_disk_initialize+0x192>
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	2baa      	cmp	r3, #170	@ 0xaa
 80008c8:	d17f      	bne.n	80009ca <SD_disk_initialize+0x192>
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1
 80008ca:	2100      	movs	r1, #0
 80008cc:	2077      	movs	r0, #119	@ 0x77
 80008ce:	f7ff ff5e 	bl	800078e <SD_SendCmd>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d807      	bhi.n	80008e8 <SD_disk_initialize+0xb0>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 80008d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008dc:	2069      	movs	r0, #105	@ 0x69
 80008de:	f7ff ff56 	bl	800078e <SD_SendCmd>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <SD_disk_initialize+0xbc>
						break;
				} while (Timer1);
 80008e8:	4b47      	ldr	r3, [pc, #284]	@ (8000a08 <SD_disk_initialize+0x1d0>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1eb      	bne.n	80008ca <SD_disk_initialize+0x92>
 80008f2:	e000      	b.n	80008f6 <SD_disk_initialize+0xbe>
						break;
 80008f4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0) {
 80008f6:	4b44      	ldr	r3, [pc, #272]	@ (8000a08 <SD_disk_initialize+0x1d0>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d064      	beq.n	80009ca <SD_disk_initialize+0x192>
 8000900:	2100      	movs	r1, #0
 8000902:	207a      	movs	r0, #122	@ 0x7a
 8000904:	f7ff ff43 	bl	800078e <SD_SendCmd>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d15d      	bne.n	80009ca <SD_disk_initialize+0x192>
					/* Check CCS bit */
					for (n = 0; n < 4; n++) {
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e00c      	b.n	800092e <SD_disk_initialize+0xf6>
						ocr[n] = SPI_RxByte();
 8000914:	7bfc      	ldrb	r4, [r7, #15]
 8000916:	f7ff fe29 	bl	800056c <SPI_RxByte>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	f104 0310 	add.w	r3, r4, #16
 8000922:	443b      	add	r3, r7
 8000924:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++) {
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	3301      	adds	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d9ef      	bls.n	8000914 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000934:	7a3b      	ldrb	r3, [r7, #8]
 8000936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SD_disk_initialize+0x10a>
 800093e:	230c      	movs	r3, #12
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x10c>
 8000942:	2304      	movs	r3, #4
 8000944:	73bb      	strb	r3, [r7, #14]
 8000946:	e040      	b.n	80009ca <SD_disk_initialize+0x192>
				}
			}
		} else {
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 8000948:	2100      	movs	r1, #0
 800094a:	2077      	movs	r0, #119	@ 0x77
 800094c:	f7ff ff1f 	bl	800078e <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d808      	bhi.n	8000968 <SD_disk_initialize+0x130>
 8000956:	2100      	movs	r1, #0
 8000958:	2069      	movs	r0, #105	@ 0x69
 800095a:	f7ff ff18 	bl	800078e <SD_SendCmd>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d801      	bhi.n	8000968 <SD_disk_initialize+0x130>
 8000964:	2302      	movs	r3, #2
 8000966:	e000      	b.n	800096a <SD_disk_initialize+0x132>
 8000968:	2301      	movs	r3, #1
 800096a:	73bb      	strb	r3, [r7, #14]
					CT_SD1 : CT_MMC;

			do {
				if (type == CT_SD1) {
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d10e      	bne.n	8000990 <SD_disk_initialize+0x158>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000972:	2100      	movs	r1, #0
 8000974:	2077      	movs	r0, #119	@ 0x77
 8000976:	f7ff ff0a 	bl	800078e <SD_SendCmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d80e      	bhi.n	800099e <SD_disk_initialize+0x166>
 8000980:	2100      	movs	r1, #0
 8000982:	2069      	movs	r0, #105	@ 0x69
 8000984:	f7ff ff03 	bl	800078e <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d107      	bne.n	800099e <SD_disk_initialize+0x166>
						break; /* ACMD41 */
 800098e:	e00d      	b.n	80009ac <SD_disk_initialize+0x174>
				} else {
					if (SD_SendCmd(CMD1, 0) == 0)
 8000990:	2100      	movs	r1, #0
 8000992:	2041      	movs	r0, #65	@ 0x41
 8000994:	f7ff fefb 	bl	800078e <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d005      	beq.n	80009aa <SD_disk_initialize+0x172>
						break; /* CMD1 */
				}

			} while (Timer1);
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <SD_disk_initialize+0x1d0>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e1      	bne.n	800096c <SD_disk_initialize+0x134>
 80009a8:	e000      	b.n	80009ac <SD_disk_initialize+0x174>
						break; /* CMD1 */
 80009aa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <SD_disk_initialize+0x1d0>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d007      	beq.n	80009c6 <SD_disk_initialize+0x18e>
 80009b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ba:	2050      	movs	r0, #80	@ 0x50
 80009bc:	f7ff fee7 	bl	800078e <SD_SendCmd>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SD_disk_initialize+0x192>
				type = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <SD_disk_initialize+0x1d4>)
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009d0:	f7ff fd88 	bl	80004e4 <DESELECT>
	SPI_RxByte();
 80009d4:	f7ff fdca 	bl	800056c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type) {
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <SD_disk_initialize+0x1b8>
		Stat &= ~STA_NOINIT;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <SD_disk_initialize+0x1cc>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <SD_disk_initialize+0x1cc>)
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e001      	b.n	80009f4 <SD_disk_initialize+0x1bc>
	} else {
		/* Initialization failed */
		SD_PowerOff();
 80009f0:	f7ff fe42 	bl	8000678 <SD_PowerOff>
	}

	return Stat;
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <SD_disk_initialize+0x1cc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200045b2 	.word	0x200045b2
 8000a0c:	2000009c 	.word	0x2000009c

08000a10 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SD_disk_status+0x14>
		return STA_NOINIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <SD_disk_status+0x1a>
	return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SD_disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <SD_disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <SD_disk_read+0x20>
		return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <SD_disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SD_disk_read+0x32>
		return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <SD_disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <SD_disk_read+0x44>
		sector *= 512;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a80:	f7ff fd20 	bl	80004c4 <SELECT>

	if (count == 1) {
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <SD_disk_read+0x72>
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	@ 0x51
 8000a8e:	f7ff fe7e 	bl	800078e <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <SD_disk_read+0xb0>
 8000a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fe03 	bl	80006a8 <SD_RxDataBlock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <SD_disk_read+0xb0>
			count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <SD_disk_read+0xb0>
	} else {
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0) {
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	@ 0x52
 8000ab2:	f7ff fe6c 	bl	800078e <SD_SendCmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <SD_disk_read+0xb0>
			do {
				if (!SD_RxDataBlock(buff, 512))
 8000abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fdf1 	bl	80006a8 <SD_RxDataBlock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <SD_disk_read+0xa6>
					break;
				buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <SD_disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <SD_disk_read+0xa8>
					break;
 8000ae2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	@ 0x4c
 8000ae8:	f7ff fe51 	bl	800078e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000aec:	f7ff fcfa 	bl	80004e4 <DESELECT>
	SPI_RxByte();
 8000af0:	f7ff fd3c 	bl	800056c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000009c 	.word	0x2000009c

08000b10 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <SD_disk_write+0x20>
		return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <SD_disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SD_disk_write+0x32>
		return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <SD_disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SD_disk_write+0x44>
		return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <SD_disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <SD_disk_write+0x56>
		sector *= 512;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b66:	f7ff fcad 	bl	80004c4 <SELECT>

	if (count == 1) {
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <SD_disk_write+0x82>
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	@ 0x58
 8000b74:	f7ff fe0b 	bl	800078e <SD_SendCmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <SD_disk_write+0xe4>
 8000b7e:	21fe      	movs	r1, #254	@ 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdc1 	bl	8000708 <SD_TxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <SD_disk_write+0xe4>
			count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <SD_disk_write+0xe4>
	} else {
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1) {
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <SD_disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <SD_disk_write+0x9e>
			SD_SendCmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	@ 0x77
 8000ba2:	f7ff fdf4 	bl	800078e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	@ 0x57
 8000baa:	f7ff fdf0 	bl	800078e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0) {
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	@ 0x59
 8000bb2:	f7ff fdec 	bl	800078e <SD_SendCmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <SD_disk_write+0xe4>
			do {
				if (!SD_TxDataBlock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	@ 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fda2 	bl	8000708 <SD_TxDataBlock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <SD_disk_write+0xd0>
					break;
				buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <SD_disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <SD_disk_write+0xd2>
					break;
 8000be0:	bf00      	nop

			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD)) {
 8000be2:	21fd      	movs	r1, #253	@ 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd8f 	bl	8000708 <SD_TxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <SD_disk_write+0xe4>
				count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bf4:	f7ff fc76 	bl	80004e4 <DESELECT>
	SPI_RxByte();
 8000bf8:	f7ff fcb8 	bl	800056c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	2000009c 	.word	0x2000009c

08000c18 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	@ 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e116      	b.n	8000e64 <SD_disk_ioctl+0x24c>
	res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	d124      	bne.n	8000c8c <SD_disk_ioctl+0x74>
		switch (*ptr) {
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d012      	beq.n	8000c70 <SD_disk_ioctl+0x58>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	dc1a      	bgt.n	8000c84 <SD_disk_ioctl+0x6c>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <SD_disk_ioctl+0x40>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d006      	beq.n	8000c64 <SD_disk_ioctl+0x4c>
 8000c56:	e015      	b.n	8000c84 <SD_disk_ioctl+0x6c>
		case 0:
			SD_PowerOff(); /* Power Off */
 8000c58:	f7ff fd0e 	bl	8000678 <SD_PowerOff>
			res = RES_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c62:	e0fd      	b.n	8000e60 <SD_disk_ioctl+0x248>
		case 1:
			SD_PowerOn(); /* Power On */
 8000c64:	f7ff fcc6 	bl	80005f4 <SD_PowerOn>
			res = RES_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c6e:	e0f7      	b.n	8000e60 <SD_disk_ioctl+0x248>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	1c5c      	adds	r4, r3, #1
 8000c74:	f7ff fd0c 	bl	8000690 <SD_CheckPower>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c82:	e0ed      	b.n	8000e60 <SD_disk_ioctl+0x248>
		default:
			res = RES_PARERR;
 8000c84:	2304      	movs	r3, #4
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c8a:	e0e9      	b.n	8000e60 <SD_disk_ioctl+0x248>
		}
	} else {
		/* no disk */
		if (Stat & STA_NOINIT)
 8000c8c:	4b77      	ldr	r3, [pc, #476]	@ (8000e6c <SD_disk_ioctl+0x254>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SD_disk_ioctl+0x86>
			return RES_NOTRDY;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e0e2      	b.n	8000e64 <SD_disk_ioctl+0x24c>

		SELECT();
 8000c9e:	f7ff fc11 	bl	80004c4 <SELECT>

		switch (ctrl) {
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b0d      	cmp	r3, #13
 8000ca6:	f200 80ca 	bhi.w	8000e3e <SD_disk_ioctl+0x226>
 8000caa:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <SD_disk_ioctl+0x98>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000da7 	.word	0x08000da7
 8000cb4:	08000ce9 	.word	0x08000ce9
 8000cb8:	08000d97 	.word	0x08000d97
 8000cbc:	08000e3f 	.word	0x08000e3f
 8000cc0:	08000e3f 	.word	0x08000e3f
 8000cc4:	08000e3f 	.word	0x08000e3f
 8000cc8:	08000e3f 	.word	0x08000e3f
 8000ccc:	08000e3f 	.word	0x08000e3f
 8000cd0:	08000e3f 	.word	0x08000e3f
 8000cd4:	08000e3f 	.word	0x08000e3f
 8000cd8:	08000e3f 	.word	0x08000e3f
 8000cdc:	08000db9 	.word	0x08000db9
 8000ce0:	08000ddd 	.word	0x08000ddd
 8000ce4:	08000e01 	.word	0x08000e01
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2049      	movs	r0, #73	@ 0x49
 8000cec:	f7ff fd4f 	bl	800078e <SD_SendCmd>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80a7 	bne.w	8000e46 <SD_disk_ioctl+0x22e>
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcd2 	bl	80006a8 <SD_RxDataBlock>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 809d 	beq.w	8000e46 <SD_disk_ioctl+0x22e>
				if ((csd[0] >> 6) == 1) {
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	099b      	lsrs	r3, r3, #6
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10d      	bne.n	8000d32 <SD_disk_ioctl+0x11a>
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d16:	7d7b      	ldrb	r3, [r7, #21]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	7d3b      	ldrb	r3, [r7, #20]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d28:	8bfb      	ldrh	r3, [r7, #30]
 8000d2a:	029a      	lsls	r2, r3, #10
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e02d      	b.n	8000d8e <SD_disk_ioctl+0x176>
				} else {
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000d32:	7c7b      	ldrb	r3, [r7, #17]
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	7dbb      	ldrb	r3, [r7, #22]
 8000d3c:	09db      	lsrs	r3, r3, #7
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000d44:	7d7b      	ldrb	r3, [r7, #21]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0306 	and.w	r3, r3, #6
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000d54:	3302      	adds	r3, #2
 8000d56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000d5a:	7d3b      	ldrb	r3, [r7, #20]
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000d6c:	7cbb      	ldrb	r3, [r7, #18]
 8000d6e:	029b      	lsls	r3, r3, #10
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d80:	8bfa      	ldrh	r2, [r7, #30]
 8000d82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d86:	3b09      	subs	r3, #9
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000d94:	e057      	b.n	8000e46 <SD_disk_ioctl+0x22e>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000da4:	e058      	b.n	8000e58 <SD_disk_ioctl+0x240>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF)
 8000da6:	f7ff fc0b 	bl	80005c0 <SD_ReadyWait>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2bff      	cmp	r3, #255	@ 0xff
 8000dae:	d14c      	bne.n	8000e4a <SD_disk_ioctl+0x232>
				res = RES_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000db6:	e048      	b.n	8000e4a <SD_disk_ioctl+0x232>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000db8:	2100      	movs	r1, #0
 8000dba:	2049      	movs	r0, #73	@ 0x49
 8000dbc:	f7ff fce7 	bl	800078e <SD_SendCmd>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d143      	bne.n	8000e4e <SD_disk_ioctl+0x236>
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	6a38      	ldr	r0, [r7, #32]
 8000dca:	f7ff fc6d 	bl	80006a8 <SD_RxDataBlock>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d03c      	beq.n	8000e4e <SD_disk_ioctl+0x236>
				res = RES_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dda:	e038      	b.n	8000e4e <SD_disk_ioctl+0x236>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ddc:	2100      	movs	r1, #0
 8000dde:	204a      	movs	r0, #74	@ 0x4a
 8000de0:	f7ff fcd5 	bl	800078e <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d133      	bne.n	8000e52 <SD_disk_ioctl+0x23a>
 8000dea:	2110      	movs	r1, #16
 8000dec:	6a38      	ldr	r0, [r7, #32]
 8000dee:	f7ff fc5b 	bl	80006a8 <SD_RxDataBlock>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d02c      	beq.n	8000e52 <SD_disk_ioctl+0x23a>
				res = RES_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dfe:	e028      	b.n	8000e52 <SD_disk_ioctl+0x23a>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0) {
 8000e00:	2100      	movs	r1, #0
 8000e02:	207a      	movs	r0, #122	@ 0x7a
 8000e04:	f7ff fcc3 	bl	800078e <SD_SendCmd>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d123      	bne.n	8000e56 <SD_disk_ioctl+0x23e>
				for (n = 0; n < 4; n++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e14:	e00b      	b.n	8000e2e <SD_disk_ioctl+0x216>
					*ptr++ = SPI_RxByte();
 8000e16:	6a3c      	ldr	r4, [r7, #32]
 8000e18:	1c63      	adds	r3, r4, #1
 8000e1a:	623b      	str	r3, [r7, #32]
 8000e1c:	f7ff fba6 	bl	800056c <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++) {
 8000e24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d9ef      	bls.n	8000e16 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000e3c:	e00b      	b.n	8000e56 <SD_disk_ioctl+0x23e>
		default:
			res = RES_PARERR;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e44:	e008      	b.n	8000e58 <SD_disk_ioctl+0x240>
			break;
 8000e46:	bf00      	nop
 8000e48:	e006      	b.n	8000e58 <SD_disk_ioctl+0x240>
			break;
 8000e4a:	bf00      	nop
 8000e4c:	e004      	b.n	8000e58 <SD_disk_ioctl+0x240>
			break;
 8000e4e:	bf00      	nop
 8000e50:	e002      	b.n	8000e58 <SD_disk_ioctl+0x240>
			break;
 8000e52:	bf00      	nop
 8000e54:	e000      	b.n	8000e58 <SD_disk_ioctl+0x240>
			break;
 8000e56:	bf00      	nop
		}

		DESELECT();
 8000e58:	f7ff fb44 	bl	80004e4 <DESELECT>
		SPI_RxByte();
 8000e5c:	f7ff fb86 	bl	800056c <SPI_RxByte>
	}

	return res;
 8000e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	372c      	adds	r7, #44	@ 0x2c
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	20000000 	.word	0x20000000

08000e70 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e7c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e88:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e8c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e90:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00b      	beq.n	8000eb0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e98:	e000      	b.n	8000e9c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e9a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f9      	beq.n	8000e9a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ea6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_write>:
/* USER CODE BEGIN 0 */

// Debugging output
// Code credit (Subzee): https://stackoverflow.com/questions/69695956/printing-in-c-to-ide-console-on-stm32cubeide
// https://www.youtube.com/watch?v=WLqUImiV5Gs
int _write(int file, char *ptr, int len) {
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e009      	b.n	8000ee4 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffc9 	bl	8000e70 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf1      	blt.n	8000ed0 <_write+0x12>
	}
	return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_I2S_TxHalfCpltCallback>:
uint32_t recording_size = 0;
uint32_t played_size = 0;

CallBack_Result_t callback_result = UNKNOWN;

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	callback_result = HALF_COMPLETED;
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200045b0 	.word	0x200045b0

08000f18 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	callback_result = FULL_COMPLETED;
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_I2S_TxCpltCallback+0x28>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]
	played_size += SAMP_RATE;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <HAL_I2S_TxCpltCallback+0x2c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <HAL_I2S_TxCpltCallback+0x2c>)
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200045b0 	.word	0x200045b0
 8000f44:	200045ac 	.word	0x200045ac

08000f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4c:	f000 ff6a 	bl	8001e24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f50:	f000 f8b4 	bl	80010bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f54:	f000 fafa 	bl	800154c <MX_GPIO_Init>
	MX_DMA_Init();
 8000f58:	f000 fad8 	bl	800150c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000f5c:	f000 faac 	bl	80014b8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000f60:	f000 f918 	bl	8001194 <MX_ADC1_Init>
	MX_I2S3_Init();
 8000f64:	f000 f968 	bl	8001238 <MX_I2S3_Init>
	MX_SPI2_Init();
 8000f68:	f000 f994 	bl	8001294 <MX_SPI2_Init>
	MX_FATFS_Init();
 8000f6c:	f005 f96a 	bl	8006244 <MX_FATFS_Init>
	MX_TIM2_Init();
 8000f70:	f000 fa4a 	bl	8001408 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000f74:	f000 f9c4 	bl	8001300 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	printf("hello\n");
 8000f78:	483f      	ldr	r0, [pc, #252]	@ (8001078 <main+0x130>)
 8000f7a:	f007 fdc9 	bl	8008b10 <puts>
	fflush(stdout);
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <main+0x134>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 fc97 	bl	80088b8 <fflush>

	// Code credit: https://www.youtube.com/watch?v=spVIZO-jbxE
	fresult = f_mount(&fs, "/", 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	493c      	ldr	r1, [pc, #240]	@ (8001080 <main+0x138>)
 8000f8e:	483d      	ldr	r0, [pc, #244]	@ (8001084 <main+0x13c>)
 8000f90:	f006 fe42 	bl	8007c18 <f_mount>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <main+0x140>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <main+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <main+0x72>
		printf("ERROR!!! in mounting SD CARD...\n");
 8000fa4:	4839      	ldr	r0, [pc, #228]	@ (800108c <main+0x144>)
 8000fa6:	f007 fdb3 	bl	8008b10 <puts>
		fflush(stdout);
 8000faa:	4b34      	ldr	r3, [pc, #208]	@ (800107c <main+0x134>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f007 fc81 	bl	80088b8 <fflush>
		return 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e05c      	b.n	8001074 <main+0x12c>
	} else {
		printf("SD CARD mounted successfully...\n");
 8000fba:	4835      	ldr	r0, [pc, #212]	@ (8001090 <main+0x148>)
 8000fbc:	f007 fda8 	bl	8008b10 <puts>
		fflush(stdout);
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <main+0x134>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fc76 	bl	80088b8 <fflush>
	}

	fresult = f_open(&fil, "/music.wav", FA_READ);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4931      	ldr	r1, [pc, #196]	@ (8001094 <main+0x14c>)
 8000fd0:	4831      	ldr	r0, [pc, #196]	@ (8001098 <main+0x150>)
 8000fd2:	f006 fe67 	bl	8007ca4 <f_open>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <main+0x140>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	f_lseek(&fil, 40); // hard-coded file size descriptor (WAVE standard)
 8000fde:	2128      	movs	r1, #40	@ 0x28
 8000fe0:	482d      	ldr	r0, [pc, #180]	@ (8001098 <main+0x150>)
 8000fe2:	f007 f958 	bl	8008296 <f_lseek>
	f_read(&fil, &recording_size, 4, (UINT*) fread_size);
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <main+0x154>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2204      	movs	r2, #4
 8000fec:	492c      	ldr	r1, [pc, #176]	@ (80010a0 <main+0x158>)
 8000fee:	482a      	ldr	r0, [pc, #168]	@ (8001098 <main+0x150>)
 8000ff0:	f007 f812 	bl	8008018 <f_read>
	recording_size /= 2; // 16 bit
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <main+0x158>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	4a29      	ldr	r2, [pc, #164]	@ (80010a0 <main+0x158>)
 8000ffc:	6013      	str	r3, [r2, #0]
	f_read(&fil, samples, 2 * SAMP_RATE, (UINT*) fread_size); // read 16k bytes (1s of data)
 8000ffe:	4b27      	ldr	r3, [pc, #156]	@ (800109c <main+0x154>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001006:	4927      	ldr	r1, [pc, #156]	@ (80010a4 <main+0x15c>)
 8001008:	4823      	ldr	r0, [pc, #140]	@ (8001098 <main+0x150>)
 800100a:	f007 f805 	bl	8008018 <f_read>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) samples, SAMP_RATE); // open data transmit hook?
 800100e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001012:	4924      	ldr	r1, [pc, #144]	@ (80010a4 <main+0x15c>)
 8001014:	4824      	ldr	r0, [pc, #144]	@ (80010a8 <main+0x160>)
 8001016:	f002 f9cd 	bl	80033b4 <HAL_I2S_Transmit_DMA>

	// light up blue LED
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	@ 0x40
 800101e:	4823      	ldr	r0, [pc, #140]	@ (80010ac <main+0x164>)
 8001020:	f002 f86e 	bl	8003100 <HAL_GPIO_WritePin>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Code credit: https://www.youtube.com/watch?v=spVIZO-jbxE
		if (callback_result == HALF_COMPLETED) {
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <main+0x168>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10a      	bne.n	8001042 <main+0xfa>
			// read SAMP_RATE amount of bytes
			// it's 16 bit audio so that's only half
			f_read(&fil, samples, SAMP_RATE, (UINT*) fread_size);
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <main+0x154>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001034:	491b      	ldr	r1, [pc, #108]	@ (80010a4 <main+0x15c>)
 8001036:	4818      	ldr	r0, [pc, #96]	@ (8001098 <main+0x150>)
 8001038:	f006 ffee 	bl	8008018 <f_read>
			callback_result = UNKNOWN;
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <main+0x168>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		}

		if (callback_result == FULL_COMPLETED) {
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <main+0x168>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d10a      	bne.n	8001060 <main+0x118>
			f_read(&fil, &samples[SAMP_RATE / 2], SAMP_RATE,
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <main+0x154>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001052:	4918      	ldr	r1, [pc, #96]	@ (80010b4 <main+0x16c>)
 8001054:	4810      	ldr	r0, [pc, #64]	@ (8001098 <main+0x150>)
 8001056:	f006 ffdf 	bl	8008018 <f_read>
					(UINT*) fread_size);
			callback_result = UNKNOWN;
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <main+0x168>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		}

		if (played_size >= recording_size) {
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <main+0x170>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <main+0x158>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d3db      	bcc.n	8001024 <main+0xdc>
			HAL_I2S_DMAStop(&hi2s3);
 800106c:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <main+0x160>)
 800106e:	f002 fa45 	bl	80034fc <HAL_I2S_DMAStop>
		if (callback_result == HALF_COMPLETED) {
 8001072:	e7d7      	b.n	8001024 <main+0xdc>
		}
	}
	/* USER CODE END 3 */
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}
 8001078:	080090f8 	.word	0x080090f8
 800107c:	20000030 	.word	0x20000030
 8001080:	08009100 	.word	0x08009100
 8001084:	200002c0 	.word	0x200002c0
 8001088:	20000720 	.word	0x20000720
 800108c:	08009104 	.word	0x08009104
 8001090:	08009124 	.word	0x08009124
 8001094:	08009144 	.word	0x08009144
 8001098:	200004f0 	.word	0x200004f0
 800109c:	200045a4 	.word	0x200045a4
 80010a0:	200045a8 	.word	0x200045a8
 80010a4:	20000724 	.word	0x20000724
 80010a8:	200000e8 	.word	0x200000e8
 80010ac:	40020000 	.word	0x40020000
 80010b0:	200045b0 	.word	0x200045b0
 80010b4:	20002664 	.word	0x20002664
 80010b8:	200045ac 	.word	0x200045ac

080010bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2230      	movs	r2, #48	@ 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fe00 	bl	8008cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <SystemClock_Config+0xd4>)
 800110a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <SystemClock_Config+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2310      	movs	r3, #16
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001130:	2310      	movs	r3, #16
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001134:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001138:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800113a:	2304      	movs	r3, #4
 800113c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800113e:	2307      	movs	r3, #7
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4618      	mov	r0, r3
 8001148:	f002 ff96 	bl	8004078 <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x9a>
		Error_Handler();
 8001152:	f000 fac5 	bl	80016e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2302      	movs	r3, #2
 800115c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001166:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f9f8 	bl	8004568 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xc6>
		Error_Handler();
 800117e:	f000 faaf 	bl	80016e0 <Error_Handler>
	}
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_ADC1_Init+0x98>)
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011aa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_ADC1_Init+0x98>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_ADC1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_ADC1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_ADC1_Init+0x98>)
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <MX_ADC1_Init+0xa0>)
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_ADC1_Init+0x98>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_ADC1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_ADC1_Init+0x98>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_ADC1_Init+0x98>)
 80011f6:	f000 feab 	bl	8001f50 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001200:	f000 fa6e 	bl	80016e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001204:	2309      	movs	r3, #9
 8001206:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_ADC1_Init+0x98>)
 8001216:	f000 fedf 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001220:	f000 fa5e 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000a0 	.word	0x200000a0
 8001230:	40012000 	.word	0x40012000
 8001234:	0f000001 	.word	0x0f000001

08001238 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_I2S3_Init+0x54>)
 800123e:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <MX_I2S3_Init+0x58>)
 8001240:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2S3_Init+0x54>)
 8001244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001248:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_I2S3_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2S3_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <MX_I2S3_Init+0x54>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_I2S3_Init+0x54>)
 800125e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001262:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2S3_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_I2S3_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2S3_Init+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_I2S3_Init+0x54>)
 8001278:	f001 ff5c 	bl	8003134 <HAL_I2S_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2S3_Init+0x4e>
		Error_Handler();
 8001282:	f000 fa2d 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000e8 	.word	0x200000e8
 8001290:	40003c00 	.word	0x40003c00

08001294 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_SPI2_Init+0x64>)
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <MX_SPI2_Init+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012e6:	f003 fcad 	bl	8004c44 <HAL_SPI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SPI2_Init+0x60>
		Error_Handler();
 80012f0:	f000 f9f6 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000190 	.word	0x20000190
 80012fc:	40003800 	.word	0x40003800

08001300 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	@ 0x48
 8001304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001306:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2220      	movs	r2, #32
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fcd0 	bl	8008cd0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <MX_TIM1_Init+0x100>)
 8001332:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <MX_TIM1_Init+0x104>)
 8001334:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001336:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <MX_TIM1_Init+0x100>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <MX_TIM1_Init+0x100>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001342:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <MX_TIM1_Init+0x100>)
 8001344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001348:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <MX_TIM1_Init+0x100>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001350:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <MX_TIM1_Init+0x100>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <MX_TIM1_Init+0x100>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800135c:	4828      	ldr	r0, [pc, #160]	@ (8001400 <MX_TIM1_Init+0x100>)
 800135e:	f004 f8c3 	bl	80054e8 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001368:	f000 f9ba 	bl	80016e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001374:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001378:	4619      	mov	r1, r3
 800137a:	4821      	ldr	r0, [pc, #132]	@ (8001400 <MX_TIM1_Init+0x100>)
 800137c:	f004 fbde 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001386:	f000 f9ab 	bl	80016e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80013a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4814      	ldr	r0, [pc, #80]	@ (8001400 <MX_TIM1_Init+0x100>)
 80013b0:	f004 f8ea 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80013ba:	f000 f991 	bl	80016e0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM1_Init+0x100>)
 80013e2:	f004 fc19 	bl	8005c18 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 80013ec:	f000 f978 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM1_Init+0x100>)
 80013f2:	f000 fb37 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3748      	adds	r7, #72	@ 0x48
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001e8 	.word	0x200001e8
 8001404:	40010000 	.word	0x40010000

08001408 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <MX_TIM2_Init+0xac>)
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM2_Init+0xac>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15;
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001440:	220f      	movs	r2, #15
 8001442:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM2_Init+0xac>)
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001452:	f004 f849 	bl	80054e8 <HAL_TIM_PWM_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0x58>
		Error_Handler();
 800145c:	f000 f940 	bl	80016e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4619      	mov	r1, r3
 800146e:	4811      	ldr	r0, [pc, #68]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001470:	f004 fb64 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800147a:	f000 f931 	bl	80016e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	@ 0x60
 8001480:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 10;
 8001482:	230a      	movs	r3, #10
 8001484:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <MX_TIM2_Init+0xac>)
 8001496:	f004 f877 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80014a0:	f000 f91e 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MX_TIM2_Init+0xac>)
 80014a6:	f000 fadd 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000230 	.word	0x20000230

080014b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_USART2_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f004 fbe4 	bl	8005cbc <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014fa:	f000 f8f1 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000278 	.word	0x20000278
 8001508:	40004400 	.word	0x40004400

0800150c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_DMA_Init+0x3c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <MX_DMA_Init+0x3c>)
 800151c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_DMA_Init+0x3c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2010      	movs	r0, #16
 8001534:	f001 f849 	bl	80025ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001538:	2010      	movs	r0, #16
 800153a:	f001 f862 	bl	8002602 <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b59      	ldr	r3, [pc, #356]	@ (80016cc <MX_GPIO_Init+0x180>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a58      	ldr	r2, [pc, #352]	@ (80016cc <MX_GPIO_Init+0x180>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b56      	ldr	r3, [pc, #344]	@ (80016cc <MX_GPIO_Init+0x180>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b52      	ldr	r3, [pc, #328]	@ (80016cc <MX_GPIO_Init+0x180>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a51      	ldr	r2, [pc, #324]	@ (80016cc <MX_GPIO_Init+0x180>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b4f      	ldr	r3, [pc, #316]	@ (80016cc <MX_GPIO_Init+0x180>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a4a      	ldr	r2, [pc, #296]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b48      	ldr	r3, [pc, #288]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a43      	ldr	r2, [pc, #268]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b41      	ldr	r3, [pc, #260]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a3c      	ldr	r2, [pc, #240]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <MX_GPIO_Init+0x180>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80015ee:	2200      	movs	r2, #0
 80015f0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80015f4:	4836      	ldr	r0, [pc, #216]	@ (80016d0 <MX_GPIO_Init+0x184>)
 80015f6:	f001 fd83 	bl	8003100 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_Output_Pin | GPIO_PIN_7 | GPIO_PIN_8
					| GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2160      	movs	r1, #96	@ 0x60
 80015fe:	4835      	ldr	r0, [pc, #212]	@ (80016d4 <MX_GPIO_Init+0x188>)
 8001600:	f001 fd7e 	bl	8003100 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_12, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f241 0104 	movw	r1, #4100	@ 0x1004
 800160a:	4833      	ldr	r0, [pc, #204]	@ (80016d8 <MX_GPIO_Init+0x18c>)
 800160c:	f001 fd78 	bl	8003100 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2104      	movs	r1, #4
 8001614:	4831      	ldr	r0, [pc, #196]	@ (80016dc <MX_GPIO_Init+0x190>)
 8001616:	f001 fd73 	bl	8003100 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800161e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001620:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001624:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4827      	ldr	r0, [pc, #156]	@ (80016d0 <MX_GPIO_Init+0x184>)
 8001632:	f001 fbe1 	bl	8002df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC4 PC5 GPIO_Output_Pin PC7
	 PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8001636:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800163a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_Output_Pin | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4820      	ldr	r0, [pc, #128]	@ (80016d0 <MX_GPIO_Init+0x184>)
 8001650:	f001 fbd2 	bl	8002df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6;
 8001654:	2360      	movs	r3, #96	@ 0x60
 8001656:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	481a      	ldr	r0, [pc, #104]	@ (80016d4 <MX_GPIO_Init+0x188>)
 800166c:	f001 fbc4 	bl	8002df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8001670:	f241 0304 	movw	r3, #4100	@ 0x1004
 8001674:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <MX_GPIO_Init+0x18c>)
 800168a:	f001 fbb5 	bl	8002df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800168e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001692:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <MX_GPIO_Init+0x188>)
 80016a4:	f001 fba8 	bl	8002df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a8:	2304      	movs	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4807      	ldr	r0, [pc, #28]	@ (80016dc <MX_GPIO_Init+0x190>)
 80016c0:	f001 fb9a 	bl	8002df8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	@ 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172a:	2007      	movs	r0, #7
 800172c:	f000 ff42 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a24      	ldr	r2, [pc, #144]	@ (80017ec <HAL_ADC_MspInit+0xb0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d141      	bne.n	80017e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <HAL_ADC_MspInit+0xb8>)
 80017c6:	f001 fb17 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ca:	2303      	movs	r3, #3
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <HAL_ADC_MspInit+0xbc>)
 80017de:	f001 fb0b 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400

080017fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	@ 0x40
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a49      	ldr	r2, [pc, #292]	@ (8001950 <HAL_I2S_MspInit+0x154>)
 800182a:	4293      	cmp	r3, r2
 800182c:	f040 808b 	bne.w	8001946 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001834:	23c0      	movs	r3, #192	@ 0xc0
 8001836:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4618      	mov	r0, r3
 8001842:	f003 f8b1 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 800184c:	f7ff ff48 	bl	80016e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a3e      	ldr	r2, [pc, #248]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 800185a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001860:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	4a37      	ldr	r2, [pc, #220]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6313      	str	r3, [r2, #48]	@ 0x30
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	4a30      	ldr	r2, [pc, #192]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6313      	str	r3, [r2, #48]	@ 0x30
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_I2S_MspInit+0x158>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a4:	2310      	movs	r3, #16
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b4:	2306      	movs	r3, #6
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4826      	ldr	r0, [pc, #152]	@ (8001958 <HAL_I2S_MspInit+0x15c>)
 80018c0:	f001 fa9a 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d6:	2306      	movs	r3, #6
 80018d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	481e      	ldr	r0, [pc, #120]	@ (800195c <HAL_I2S_MspInit+0x160>)
 80018e2:	f001 fa89 	bl	8002df8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 80018e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_I2S_MspInit+0x168>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 80018f4:	2240      	movs	r2, #64	@ 0x40
 80018f6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001900:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001904:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800190c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001914:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800192a:	480d      	ldr	r0, [pc, #52]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 800192c:	f000 fe84 	bl	8002638 <HAL_DMA_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001936:	f7ff fed3 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 800193e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <HAL_I2S_MspInit+0x164>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001946:	bf00      	nop
 8001948:	3740      	adds	r7, #64	@ 0x40
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40003c00 	.word	0x40003c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020800 	.word	0x40020800
 8001960:	20000130 	.word	0x20000130
 8001964:	40026088 	.word	0x40026088

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_SPI_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80019c2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d4:	2305      	movs	r3, #5
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019e0:	f001 fa0a 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	@ 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40003800 	.word	0x40003800
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <HAL_TIM_PWM_MspInit+0x64>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10e      	bne.n	8001a28 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a26:	e012      	b.n	8001a4e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a30:	d10d      	bne.n	8001a4e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x68>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <HAL_TIM_MspPostInit+0xb4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d11f      	bne.n	8001ac6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <HAL_TIM_MspPostInit+0xbc>)
 8001ac0:	f001 f99a 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ac4:	e023      	b.n	8001b0e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ace:	d11e      	bne.n	8001b0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_TIM_MspPostInit+0xb8>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afe:	2301      	movs	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <HAL_TIM_MspPostInit+0xc0>)
 8001b0a:	f001 f975 	bl	8002df8 <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	@ (8001bac <HAL_UART_MspInit+0x84>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12b      	bne.n	8001ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b82:	230c      	movs	r3, #12
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b92:	2307      	movs	r3, #7
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_UART_MspInit+0x8c>)
 8001b9e:	f001 f92b 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <SDTimer_Handler+0x40>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <SDTimer_Handler+0x1c>
		Timer1--;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <SDTimer_Handler+0x40>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <SDTimer_Handler+0x40>)
 8001bd2:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <SDTimer_Handler+0x44>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <SDTimer_Handler+0x34>
		Timer2--;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <SDTimer_Handler+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SDTimer_Handler+0x44>)
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200045b2 	.word	0x200045b2
 8001bfc:	200045b3 	.word	0x200045b3

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <NMI_Handler+0x4>

08001c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <MemManage_Handler+0x4>

08001c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <SysTick_Handler+0x30>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <SysTick_Handler+0x30>)
 8001c64:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <SysTick_Handler+0x30>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d904      	bls.n	8001c7a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Handler+0x30>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001c76:	f7ff ff9f 	bl	8001bb8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7a:	f000 f925 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200045b1 	.word	0x200045b1

08001c88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <DMA1_Stream5_IRQHandler+0x10>)
 8001c8e:	f000 fe49 	bl	8002924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000130 	.word	0x20000130

08001c9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e00a      	b.n	8001cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf0      	blt.n	8001cae <_read+0x12>
  }

  return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_isatty>:

int _isatty(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f006 fffc 	bl	8008d6c <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20018000 	.word	0x20018000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	200045b4 	.word	0x200045b4
 8001da8:	20004748 	.word	0x20004748

08001dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd4:	f7ff ffea 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	@ (8001e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f006 ffbb 	bl	8008d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e02:	f7ff f8a1 	bl	8000f48 <main>
  bx  lr    
 8001e06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e14:	08009244 	.word	0x08009244
  ldr r2, =_sbss
 8001e18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e1c:	20004744 	.word	0x20004744

08001e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <HAL_Init+0x40>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_Init+0x40>)
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_Init+0x40>)
 8001e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fbb1 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fc48 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fbc9 	bl	800261e <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea4:	f000 fb91 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	200045b8 	.word	0x200045b8

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200045b8 	.word	0x200045b8

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000000c 	.word	0x2000000c

08001f50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e033      	b.n	8001fce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fbe4 	bl	800173c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f96:	f023 0302 	bic.w	r3, r3, #2
 8001f9a:	f043 0202 	orr.w	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f93a 	bl	800221c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fbe:	e001      	b.n	8001fc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e105      	b.n	8002200 <HAL_ADC_ConfigChannel+0x228>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b09      	cmp	r3, #9
 8002002:	d925      	bls.n	8002050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	3b1e      	subs	r3, #30
 800201a:	2207      	movs	r2, #7
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43da      	mvns	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	400a      	ands	r2, r1
 8002028:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68d9      	ldr	r1, [r3, #12]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	4603      	mov	r3, r0
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4403      	add	r3, r0
 8002042:	3b1e      	subs	r3, #30
 8002044:	409a      	lsls	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	e022      	b.n	8002096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	2207      	movs	r2, #7
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	400a      	ands	r2, r1
 8002072:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	4603      	mov	r3, r0
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4403      	add	r3, r0
 800208c:	409a      	lsls	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b06      	cmp	r3, #6
 800209c:	d824      	bhi.n	80020e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b05      	subs	r3, #5
 80020b0:	221f      	movs	r2, #31
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	400a      	ands	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b05      	subs	r3, #5
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e6:	e04c      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d824      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	3b23      	subs	r3, #35	@ 0x23
 8002102:	221f      	movs	r2, #31
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43da      	mvns	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	400a      	ands	r2, r1
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b23      	subs	r3, #35	@ 0x23
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
 8002138:	e023      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b41      	subs	r3, #65	@ 0x41
 800214c:	221f      	movs	r2, #31
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	400a      	ands	r2, r1
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b41      	subs	r3, #65	@ 0x41
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_ADC_ConfigChannel+0x234>)
 8002184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_ADC_ConfigChannel+0x238>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d109      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b12      	cmp	r3, #18
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_ADC_ConfigChannel+0x238>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d123      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x21e>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d003      	beq.n	80021be <HAL_ADC_ConfigChannel+0x1e6>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b11      	cmp	r3, #17
 80021bc:	d11b      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d111      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_ADC_ConfigChannel+0x23c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <HAL_ADC_ConfigChannel+0x240>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40012300 	.word	0x40012300
 8002210:	40012000 	.word	0x40012000
 8002214:	20000004 	.word	0x20000004
 8002218:	431bde83 	.word	0x431bde83

0800221c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002224:	4b79      	ldr	r3, [pc, #484]	@ (800240c <ADC_Init+0x1f0>)
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	021a      	lsls	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <ADC_Init+0x1f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e00f      	b.n	800231a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002318:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0202 	bic.w	r2, r2, #2
 8002328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7e1b      	ldrb	r3, [r3, #24]
 8002334:	005a      	lsls	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01b      	beq.n	8002380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002356:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	3b01      	subs	r3, #1
 8002374:	035a      	lsls	r2, r3, #13
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e007      	b.n	8002390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800238e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	051a      	lsls	r2, r3, #20
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023d2:	025a      	lsls	r2, r3, #9
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	029a      	lsls	r2, r3, #10
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40012300 	.word	0x40012300
 8002410:	0f000001 	.word	0x0f000001

08002414 <__NVIC_SetPriorityGrouping>:
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4907      	ldr	r1, [pc, #28]	@ (80024b0 <__NVIC_EnableIRQ+0x38>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100

080024b4 <__NVIC_SetPriority>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	@ (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	@ (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Config>:
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002594:	f7ff ff8e 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff29 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff3e 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff8e 	bl	8002508 <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff31 	bl	8002478 <__NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffa2 	bl	8002570 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff fc54 	bl	8001ef0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e099      	b.n	8002788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002674:	e00f      	b.n	8002696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002676:	f7ff fc3b 	bl	8001ef0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b05      	cmp	r3, #5
 8002682:	d908      	bls.n	8002696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2203      	movs	r2, #3
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e078      	b.n	8002788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e8      	bne.n	8002676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4b38      	ldr	r3, [pc, #224]	@ (8002790 <HAL_DMA_Init+0x158>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4313      	orrs	r3, r2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	2b04      	cmp	r3, #4
 8002728:	d117      	bne.n	800275a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fadf 	bl	8002d00 <DMA_CheckFifoParam>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002756:	2301      	movs	r3, #1
 8002758:	e016      	b.n	8002788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa96 	bl	8002c94 <DMA_CalcBaseAndBitshift>
 8002768:	4603      	mov	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	223f      	movs	r2, #63	@ 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	f010803f 	.word	0xf010803f

08002794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_DMA_Start_IT+0x26>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e040      	b.n	800283c <HAL_DMA_Start_IT+0xa8>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d12f      	bne.n	800282e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa28 	bl	8002c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	223f      	movs	r2, #63	@ 0x3f
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0216 	orr.w	r2, r2, #22
 8002802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0208 	orr.w	r2, r2, #8
 800281a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e005      	b.n	800283a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002852:	f7ff fb4d 	bl	8001ef0 <HAL_GetTick>
 8002856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d008      	beq.n	8002876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e052      	b.n	800291c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0216 	bic.w	r2, r2, #22
 8002884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_DMA_Abort+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c6:	e013      	b.n	80028f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c8:	f7ff fb12 	bl	8001ef0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d90c      	bls.n	80028f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2203      	movs	r2, #3
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e015      	b.n	800291c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e4      	bne.n	80028c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	223f      	movs	r2, #63	@ 0x3f
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002930:	4b8e      	ldr	r3, [pc, #568]	@ (8002b6c <HAL_DMA_IRQHandler+0x248>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8e      	ldr	r2, [pc, #568]	@ (8002b70 <HAL_DMA_IRQHandler+0x24c>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	2208      	movs	r2, #8
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01a      	beq.n	8002990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0204 	bic.w	r2, r2, #4
 8002976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	2208      	movs	r2, #8
 800297e:	409a      	lsls	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d012      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f043 0202 	orr.w	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2204      	movs	r2, #4
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	2204      	movs	r2, #4
 80029ea:	409a      	lsls	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	2210      	movs	r2, #16
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d043      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03c      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	2210      	movs	r2, #16
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d024      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	e01f      	b.n	8002a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01b      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e016      	b.n	8002a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0208 	bic.w	r2, r2, #8
 8002a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	2220      	movs	r2, #32
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 808f 	beq.w	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8087 	beq.w	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	2220      	movs	r2, #32
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d136      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0216 	bic.w	r2, r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_DMA_IRQHandler+0x1da>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	223f      	movs	r2, #63	@ 0x3f
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d07e      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
        }
        return;
 8002b3a:	e079      	b.n	8002c30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e02c      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
 8002b6a:	bf00      	nop
 8002b6c:	20000004 	.word	0x20000004
 8002b70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d023      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
 8002b84:	e01e      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10f      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0210 	bic.w	r2, r2, #16
 8002ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d032      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2205      	movs	r2, #5
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d307      	bcc.n	8002c0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f2      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x2cc>
 8002c0a:	e000      	b.n	8002c0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
 8002c2e:	e000      	b.n	8002c32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c30:	bf00      	nop
    }
  }
}
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d108      	bne.n	8002c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c76:	e007      	b.n	8002c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	60da      	str	r2, [r3, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3b10      	subs	r3, #16
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x68>)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d909      	bls.n	8002cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	1d1a      	adds	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cd4:	e007      	b.n	8002ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	aaaaaaab 	.word	0xaaaaaaab
 8002cfc:	080091ac 	.word	0x080091ac

08002d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d856      	bhi.n	8002dce <DMA_CheckFifoParam+0xce>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <DMA_CheckFifoParam+0x28>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d4b 	.word	0x08002d4b
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	08002dcf 	.word	0x08002dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d046      	beq.n	8002dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e043      	b.n	8002dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d52:	d140      	bne.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e03d      	b.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d62:	d121      	bne.n	8002da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d837      	bhi.n	8002dda <DMA_CheckFifoParam+0xda>
 8002d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <DMA_CheckFifoParam+0x70>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d87 	.word	0x08002d87
 8002d78:	08002d81 	.word	0x08002d81
 8002d7c:	08002d99 	.word	0x08002d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e030      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d025      	beq.n	8002dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d96:	e022      	b.n	8002dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002da0:	d11f      	bne.n	8002de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002da6:	e01c      	b.n	8002de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d903      	bls.n	8002db6 <DMA_CheckFifoParam+0xb6>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d003      	beq.n	8002dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db4:	e018      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dba:	e015      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e00b      	b.n	8002de6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e00a      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e008      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e006      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e004      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002de6:	bf00      	nop
    }
  } 
  
  return status; 
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e159      	b.n	80030c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8148 	bne.w	80030c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d005      	beq.n	8002e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d130      	bne.n	8002eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0201 	and.w	r2, r3, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d017      	beq.n	8002ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d123      	bne.n	8002f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a2 	beq.w	80030c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b57      	ldr	r3, [pc, #348]	@ (80030e0 <HAL_GPIO_Init+0x2e8>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	4a56      	ldr	r2, [pc, #344]	@ (80030e0 <HAL_GPIO_Init+0x2e8>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f8e:	4b54      	ldr	r3, [pc, #336]	@ (80030e0 <HAL_GPIO_Init+0x2e8>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_GPIO_Init+0x2ec>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a49      	ldr	r2, [pc, #292]	@ (80030e8 <HAL_GPIO_Init+0x2f0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_GPIO_Init+0x202>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a48      	ldr	r2, [pc, #288]	@ (80030ec <HAL_GPIO_Init+0x2f4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x1fe>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a47      	ldr	r2, [pc, #284]	@ (80030f0 <HAL_GPIO_Init+0x2f8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x1fa>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a46      	ldr	r2, [pc, #280]	@ (80030f4 <HAL_GPIO_Init+0x2fc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x1f6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a45      	ldr	r2, [pc, #276]	@ (80030f8 <HAL_GPIO_Init+0x300>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x1f2>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x2ec>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b38      	ldr	r3, [pc, #224]	@ (80030fc <HAL_GPIO_Init+0x304>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a2f      	ldr	r2, [pc, #188]	@ (80030fc <HAL_GPIO_Init+0x304>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_GPIO_Init+0x304>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <HAL_GPIO_Init+0x304>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b23      	ldr	r3, [pc, #140]	@ (80030fc <HAL_GPIO_Init+0x304>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1a      	ldr	r2, [pc, #104]	@ (80030fc <HAL_GPIO_Init+0x304>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <HAL_GPIO_Init+0x304>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a0f      	ldr	r2, [pc, #60]	@ (80030fc <HAL_GPIO_Init+0x304>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f aea2 	bls.w	8002e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40013c00 	.word	0x40013c00

08003100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800311c:	e003      	b.n	8003126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	619a      	str	r2, [r3, #24]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e128      	b.n	8003398 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a90      	ldr	r2, [pc, #576]	@ (80033a0 <HAL_I2S_Init+0x26c>)
 800315e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe fb4b 	bl	80017fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800317c:	f023 030f 	bic.w	r3, r3, #15
 8003180:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d060      	beq.n	8003254 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800319a:	2310      	movs	r3, #16
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e001      	b.n	80031a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d802      	bhi.n	80031b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f001 fce6 	bl	8004b84 <HAL_RCCEx_GetPeriphCLKFreq>
 80031b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c2:	d125      	bne.n	8003210 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	461a      	mov	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	3305      	adds	r3, #5
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e01f      	b.n	800322e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	3305      	adds	r3, #5
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e00e      	b.n	800322e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fbb2 f2f3 	udiv	r2, r2, r3
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	3305      	adds	r3, #5
 800322c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a5c      	ldr	r2, [pc, #368]	@ (80033a4 <HAL_I2S_Init+0x270>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003254:	2302      	movs	r3, #2
 8003256:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d902      	bls.n	8003268 <HAL_I2S_Init+0x134>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2bff      	cmp	r3, #255	@ 0xff
 8003266:	d907      	bls.n	8003278 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e08f      	b.n	8003398 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	ea42 0103 	orr.w	r1, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	430a      	orrs	r2, r1
 800328a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003296:	f023 030f 	bic.w	r3, r3, #15
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6851      	ldr	r1, [r2, #4]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6992      	ldr	r2, [r2, #24]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d161      	bne.n	8003388 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a38      	ldr	r2, [pc, #224]	@ (80033a8 <HAL_I2S_Init+0x274>)
 80032c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a37      	ldr	r2, [pc, #220]	@ (80033ac <HAL_I2S_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_I2S_Init+0x1a4>
 80032d4:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <HAL_I2S_Init+0x27c>)
 80032d6:	e001      	b.n	80032dc <HAL_I2S_Init+0x1a8>
 80032d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4932      	ldr	r1, [pc, #200]	@ (80033ac <HAL_I2S_Init+0x278>)
 80032e4:	428a      	cmp	r2, r1
 80032e6:	d101      	bne.n	80032ec <HAL_I2S_Init+0x1b8>
 80032e8:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <HAL_I2S_Init+0x27c>)
 80032ea:	e001      	b.n	80032f0 <HAL_I2S_Init+0x1bc>
 80032ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80032f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2b      	ldr	r2, [pc, #172]	@ (80033ac <HAL_I2S_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_I2S_Init+0x1d4>
 8003304:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <HAL_I2S_Init+0x27c>)
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x1d8>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800330c:	2202      	movs	r2, #2
 800330e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a25      	ldr	r2, [pc, #148]	@ (80033ac <HAL_I2S_Init+0x278>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_I2S_Init+0x1ea>
 800331a:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <HAL_I2S_Init+0x27c>)
 800331c:	e001      	b.n	8003322 <HAL_I2S_Init+0x1ee>
 800331e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800332e:	d003      	beq.n	8003338 <HAL_I2S_Init+0x204>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e001      	b.n	8003344 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800334e:	4313      	orrs	r3, r2
 8003350:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003358:	4313      	orrs	r3, r2
 800335a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003362:	4313      	orrs	r3, r2
 8003364:	b29a      	uxth	r2, r3
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	4313      	orrs	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003370:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <HAL_I2S_Init+0x278>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_I2S_Init+0x24c>
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_I2S_Init+0x27c>)
 800337e:	e001      	b.n	8003384 <HAL_I2S_Init+0x250>
 8003380:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003384:	897a      	ldrh	r2, [r7, #10]
 8003386:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	08003a3d 	.word	0x08003a3d
 80033a4:	cccccccd 	.word	0xcccccccd
 80033a8:	08003bc5 	.word	0x08003bc5
 80033ac:	40003800 	.word	0x40003800
 80033b0:	40003400 	.word	0x40003400

080033b4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_I2S_Transmit_DMA+0x1a>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e08a      	b.n	80034e8 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	e082      	b.n	80034e8 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2S_Transmit_DMA+0x3e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e07a      	b.n	80034e8 <HAL_I2S_Transmit_DMA+0x134>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d002      	beq.n	8003426 <HAL_I2S_Transmit_DMA+0x72>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10a      	bne.n	800343c <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800343a:	e005      	b.n	8003448 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	4a28      	ldr	r2, [pc, #160]	@ (80034f0 <HAL_I2S_Transmit_DMA+0x13c>)
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <HAL_I2S_Transmit_DMA+0x140>)
 8003456:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	4a26      	ldr	r2, [pc, #152]	@ (80034f8 <HAL_I2S_Transmit_DMA+0x144>)
 800345e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003468:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003470:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003478:	f7ff f98c 	bl	8002794 <HAL_DMA_Start_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00f      	beq.n	80034a2 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0208 	orr.w	r2, r3, #8
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0202 	orr.w	r2, r2, #2
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034e4:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	0800391b 	.word	0x0800391b
 80034f4:	080038d9 	.word	0x080038d9
 80034f8:	08003937 	.word	0x08003937

080034fc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003510:	d004      	beq.n	800351c <HAL_I2S_DMAStop+0x20>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 80d1 	bne.w	80036be <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f98b 	bl	8002844 <HAL_DMA_Abort>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f043 0208 	orr.w	r2, r3, #8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003544:	2364      	movs	r3, #100	@ 0x64
 8003546:	2201      	movs	r2, #1
 8003548:	2102      	movs	r1, #2
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fb00 	bl	8003b50 <I2S_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800356e:	2364      	movs	r3, #100	@ 0x64
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 faeb 	bl	8003b50 <I2S_WaitFlagStateUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0202 	bic.w	r2, r2, #2
 80035c4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	f040 8165 	bne.w	800389e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f92f 	bl	8002844 <HAL_DMA_Abort>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f043 0208 	orr.w	r2, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8a      	ldr	r2, [pc, #552]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2S_DMAStop+0x10e>
 8003606:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 8003608:	e001      	b.n	800360e <HAL_I2S_DMAStop+0x112>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4985      	ldr	r1, [pc, #532]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d101      	bne.n	800361e <HAL_I2S_DMAStop+0x122>
 800361a:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 800361c:	e001      	b.n	8003622 <HAL_I2S_DMAStop+0x126>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003626:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7e      	ldr	r2, [pc, #504]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_I2S_DMAStop+0x13e>
 8003636:	4b7e      	ldr	r3, [pc, #504]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 8003638:	e001      	b.n	800363e <HAL_I2S_DMAStop+0x142>
 800363a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a79      	ldr	r2, [pc, #484]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_I2S_DMAStop+0x154>
 800364c:	4b78      	ldr	r3, [pc, #480]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 800364e:	e001      	b.n	8003654 <HAL_I2S_DMAStop+0x158>
 8003650:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_I2S_DMAStop+0x16c>
 8003664:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 8003666:	e001      	b.n	800366c <HAL_I2S_DMAStop+0x170>
 8003668:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	496e      	ldr	r1, [pc, #440]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003674:	428b      	cmp	r3, r1
 8003676:	d101      	bne.n	800367c <HAL_I2S_DMAStop+0x180>
 8003678:	4b6d      	ldr	r3, [pc, #436]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 800367a:	e001      	b.n	8003680 <HAL_I2S_DMAStop+0x184>
 800367c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80036a6:	e0fa      	b.n	800389e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5f      	ldr	r2, [pc, #380]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_I2S_DMAStop+0x1ba>
 80036b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 80036b4:	e001      	b.n	80036ba <HAL_I2S_DMAStop+0x1be>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ba:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80036bc:	e0ef      	b.n	800389e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c6:	d005      	beq.n	80036d4 <HAL_I2S_DMAStop+0x1d8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d0:	f040 80e5 	bne.w	800389e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00f      	beq.n	80036fc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f8af 	bl	8002844 <HAL_DMA_Abort>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b05      	cmp	r3, #5
 8003706:	f040 809a 	bne.w	800383e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00f      	beq.n	8003732 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f894 	bl	8002844 <HAL_DMA_Abort>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f043 0208 	orr.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8003732:	f7fe fbdd 	bl	8001ef0 <HAL_GetTick>
 8003736:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003738:	e012      	b.n	8003760 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800373a:	f7fe fbd9 	bl	8001ef0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	@ 0x64
 8003746:	d90b      	bls.n	8003760 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a31      	ldr	r2, [pc, #196]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2S_DMAStop+0x272>
 800376a:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 800376c:	e001      	b.n	8003772 <HAL_I2S_DMAStop+0x276>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d1de      	bne.n	800373a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800377c:	e012      	b.n	80037a4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800377e:	f7fe fbb7 	bl	8001ef0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	@ 0x64
 800378a:	d90b      	bls.n	80037a4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a20      	ldr	r2, [pc, #128]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_I2S_DMAStop+0x2b6>
 80037ae:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2S_DMAStop+0x2ba>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b80      	cmp	r3, #128	@ 0x80
 80037be:	d0de      	beq.n	800377e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a19      	ldr	r2, [pc, #100]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_I2S_DMAStop+0x2d2>
 80037ca:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 80037cc:	e001      	b.n	80037d2 <HAL_I2S_DMAStop+0x2d6>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4914      	ldr	r1, [pc, #80]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 80037da:	428b      	cmp	r3, r1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2S_DMAStop+0x2e6>
 80037de:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2S_DMAStop+0x2ea>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ea:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2S_DMAStop+0x302>
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 80037fc:	e001      	b.n	8003802 <HAL_I2S_DMAStop+0x306>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a07      	ldr	r2, [pc, #28]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_I2S_DMAStop+0x31a>
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 8003814:	e001      	b.n	800381a <HAL_I2S_DMAStop+0x31e>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4902      	ldr	r1, [pc, #8]	@ (800382c <HAL_I2S_DMAStop+0x330>)
 8003822:	428b      	cmp	r3, r1
 8003824:	d106      	bne.n	8003834 <HAL_I2S_DMAStop+0x338>
 8003826:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <HAL_I2S_DMAStop+0x334>)
 8003828:	e006      	b.n	8003838 <HAL_I2S_DMAStop+0x33c>
 800382a:	bf00      	nop
 800382c:	40003800 	.word	0x40003800
 8003830:	40003400 	.word	0x40003400
 8003834:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003838:	f022 0202 	bic.w	r2, r2, #2
 800383c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387c:	d10c      	bne.n	8003898 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e002      	b.n	800389e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80038a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10e      	bne.n	800390c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0202 	bic.w	r2, r2, #2
 80038fc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7fd fb03 	bl	8000f18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7fd fae5 	bl	8000ef8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0203 	bic.w	r2, r2, #3
 8003952:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f043 0208 	orr.w	r2, r3, #8
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff ffa5 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10e      	bne.n	80039d6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd faa1 	bl	8000f18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	b292      	uxth	r2, r2
 80039f2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10e      	bne.n	8003a34 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff3e 	bl	80038b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d13a      	bne.n	8003ace <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d109      	bne.n	8003a76 <I2S_IRQHandler+0x3a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d102      	bne.n	8003a76 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ffb4 	bl	80039de <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d126      	bne.n	8003ace <I2S_IRQHandler+0x92>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d11f      	bne.n	8003ace <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a9c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	f043 0202 	orr.w	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fefb 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d136      	bne.n	8003b48 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d109      	bne.n	8003af8 <I2S_IRQHandler+0xbc>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d102      	bne.n	8003af8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff45 	bl	8003982 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d122      	bne.n	8003b48 <I2S_IRQHandler+0x10c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d11b      	bne.n	8003b48 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b1e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f043 0204 	orr.w	r2, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff febe 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b60:	f7fe f9c6 	bl	8001ef0 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003b66:	e018      	b.n	8003b9a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6e:	d014      	beq.n	8003b9a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003b70:	f7fe f9be 	bl	8001ef0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d902      	bls.n	8003b86 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e00f      	b.n	8003bba <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1d7      	bne.n	8003b68 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a92      	ldr	r2, [pc, #584]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bde:	4b92      	ldr	r3, [pc, #584]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be0:	e001      	b.n	8003be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003be2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a8b      	ldr	r2, [pc, #556]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bfe:	e001      	b.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c10:	d004      	beq.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 8099 	bne.w	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d107      	bne.n	8003c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f925 	bl	8003e80 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9c8 	bl	8003fe0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b40      	cmp	r3, #64	@ 0x40
 8003c58:	d13a      	bne.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d035      	beq.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c70:	e001      	b.n	8003c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4969      	ldr	r1, [pc, #420]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c82:	4b69      	ldr	r3, [pc, #420]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c84:	e001      	b.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fdfa 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	f040 80c3 	bne.w	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80bd 	beq.w	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cf6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d02:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d04:	e001      	b.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4944      	ldr	r1, [pc, #272]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d12:	428b      	cmp	r3, r1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d16:	4b44      	ldr	r3, [pc, #272]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d18:	e001      	b.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fdbc 	bl	80038c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d4c:	e089      	b.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d107      	bne.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8be 	bl	8003ee4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d107      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8fd 	bl	8003f7c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d12f      	bne.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02a      	beq.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003da4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db2:	e001      	b.n	8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003db4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4919      	ldr	r1, [pc, #100]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003dc4:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc6:	e001      	b.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dcc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0202 	orr.w	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fd6c 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d136      	bne.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d031      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a07      	ldr	r2, [pc, #28]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e0a:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e0c:	e001      	b.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4902      	ldr	r1, [pc, #8]	@ (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1a:	428b      	cmp	r3, r1
 8003e1c:	d106      	bne.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e1e:	4b02      	ldr	r3, [pc, #8]	@ (8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e20:	e006      	b.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e22:	bf00      	nop
 8003e24:	40003800 	.word	0x40003800
 8003e28:	40003400 	.word	0x40003400
 8003e2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e34:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0204 	orr.w	r2, r3, #4
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fd32 	bl	80038c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e60:	e000      	b.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e62:	bf00      	nop
}
 8003e64:	bf00      	nop
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	1c99      	adds	r1, r3, #2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6251      	str	r1, [r2, #36]	@ 0x24
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ec0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffc9 	bl	8003e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	1c99      	adds	r1, r3, #2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ef6:	8819      	ldrh	r1, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <I2SEx_TxISR_I2SExt+0x90>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <I2SEx_TxISR_I2SExt+0x22>
 8003f02:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <I2SEx_TxISR_I2SExt+0x94>)
 8003f04:	e001      	b.n	8003f0a <I2SEx_TxISR_I2SExt+0x26>
 8003f06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d121      	bne.n	8003f6a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a12      	ldr	r2, [pc, #72]	@ (8003f74 <I2SEx_TxISR_I2SExt+0x90>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <I2SEx_TxISR_I2SExt+0x50>
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <I2SEx_TxISR_I2SExt+0x94>)
 8003f32:	e001      	b.n	8003f38 <I2SEx_TxISR_I2SExt+0x54>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	490d      	ldr	r1, [pc, #52]	@ (8003f74 <I2SEx_TxISR_I2SExt+0x90>)
 8003f40:	428b      	cmp	r3, r1
 8003f42:	d101      	bne.n	8003f48 <I2SEx_TxISR_I2SExt+0x64>
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <I2SEx_TxISR_I2SExt+0x94>)
 8003f46:	e001      	b.n	8003f4c <I2SEx_TxISR_I2SExt+0x68>
 8003f48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff81 	bl	8003e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40003800 	.word	0x40003800
 8003f78:	40003400 	.word	0x40003400

08003f7c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68d8      	ldr	r0, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	1c99      	adds	r1, r3, #2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003f94:	b282      	uxth	r2, r0
 8003f96:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d113      	bne.n	8003fd8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fbe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff4a 	bl	8003e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <I2SEx_RxISR_I2SExt+0x90>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <I2SEx_RxISR_I2SExt+0x16>
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <I2SEx_RxISR_I2SExt+0x94>)
 8003ff4:	e001      	b.n	8003ffa <I2SEx_RxISR_I2SExt+0x1a>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffa:	68d8      	ldr	r0, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	1c99      	adds	r1, r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004006:	b282      	uxth	r2, r0
 8004008:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <I2SEx_RxISR_I2SExt+0x90>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <I2SEx_RxISR_I2SExt+0x50>
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <I2SEx_RxISR_I2SExt+0x94>)
 800402e:	e001      	b.n	8004034 <I2SEx_RxISR_I2SExt+0x54>
 8004030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	490d      	ldr	r1, [pc, #52]	@ (8004070 <I2SEx_RxISR_I2SExt+0x90>)
 800403c:	428b      	cmp	r3, r1
 800403e:	d101      	bne.n	8004044 <I2SEx_RxISR_I2SExt+0x64>
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <I2SEx_RxISR_I2SExt+0x94>)
 8004042:	e001      	b.n	8004048 <I2SEx_RxISR_I2SExt+0x68>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004048:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800404c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff03 	bl	8003e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40003400 	.word	0x40003400

08004078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e267      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d075      	beq.n	8004182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004096:	4b88      	ldr	r3, [pc, #544]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d00c      	beq.n	80040bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b85      	ldr	r3, [pc, #532]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d112      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ba:	d10b      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	4b7e      	ldr	r3, [pc, #504]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05b      	beq.n	8004180 <HAL_RCC_OscConfig+0x108>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d157      	bne.n	8004180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e242      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040dc:	d106      	bne.n	80040ec <HAL_RCC_OscConfig+0x74>
 80040de:	4b76      	ldr	r3, [pc, #472]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e01d      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x98>
 80040f6:	4b70      	ldr	r3, [pc, #448]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6f      	ldr	r2, [pc, #444]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b6d      	ldr	r3, [pc, #436]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6c      	ldr	r2, [pc, #432]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0xb0>
 8004110:	4b69      	ldr	r3, [pc, #420]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a68      	ldr	r2, [pc, #416]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fede 	bl	8001ef0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd feda 	bl	8001ef0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e207      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0xc0>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd feca 	bl	8001ef0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd fec6 	bl	8001ef0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1f3      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	4b51      	ldr	r3, [pc, #324]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0xe8>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d063      	beq.n	8004256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b47      	ldr	r3, [pc, #284]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d11c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b44      	ldr	r3, [pc, #272]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d116      	bne.n	80041e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	4b41      	ldr	r3, [pc, #260]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e1c7      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ca:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4937      	ldr	r1, [pc, #220]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	e03a      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e8:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <HAL_RCC_OscConfig+0x244>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fe7f 	bl	8001ef0 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fd fe7b 	bl	8001ef0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1a8      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004208:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4925      	ldr	r1, [pc, #148]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]
 8004228:	e015      	b.n	8004256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422a:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <HAL_RCC_OscConfig+0x244>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fe5e 	bl	8001ef0 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004238:	f7fd fe5a 	bl	8001ef0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e187      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d036      	beq.n	80042d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d016      	beq.n	8004298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426a:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <HAL_RCC_OscConfig+0x248>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fd fe3e 	bl	8001ef0 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004278:	f7fd fe3a 	bl	8001ef0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e167      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_OscConfig+0x240>)
 800428c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x200>
 8004296:	e01b      	b.n	80042d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004298:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_RCC_OscConfig+0x248>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429e:	f7fd fe27 	bl	8001ef0 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	e00e      	b.n	80042c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fd fe23 	bl	8001ef0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d907      	bls.n	80042c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e150      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
 80042b8:	40023800 	.word	0x40023800
 80042bc:	42470000 	.word	0x42470000
 80042c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ea      	bne.n	80042a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8097 	beq.w	800440c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e2:	4b81      	ldr	r3, [pc, #516]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b7d      	ldr	r3, [pc, #500]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4a7c      	ldr	r2, [pc, #496]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fe:	4b7a      	ldr	r3, [pc, #488]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b77      	ldr	r3, [pc, #476]	@ (80044ec <HAL_RCC_OscConfig+0x474>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b74      	ldr	r3, [pc, #464]	@ (80044ec <HAL_RCC_OscConfig+0x474>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a73      	ldr	r2, [pc, #460]	@ (80044ec <HAL_RCC_OscConfig+0x474>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fd fde3 	bl	8001ef0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fd fddf 	bl	8001ef0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e10c      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b6a      	ldr	r3, [pc, #424]	@ (80044ec <HAL_RCC_OscConfig+0x474>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x2ea>
 8004354:	4b64      	ldr	r3, [pc, #400]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004358:	4a63      	ldr	r2, [pc, #396]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004360:	e01c      	b.n	800439c <HAL_RCC_OscConfig+0x324>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b05      	cmp	r3, #5
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x30c>
 800436a:	4b5f      	ldr	r3, [pc, #380]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	4a5e      	ldr	r2, [pc, #376]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6713      	str	r3, [r2, #112]	@ 0x70
 8004376:	4b5c      	ldr	r3, [pc, #368]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	4a5b      	ldr	r2, [pc, #364]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6713      	str	r3, [r2, #112]	@ 0x70
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0x324>
 8004384:	4b58      	ldr	r3, [pc, #352]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	4a57      	ldr	r2, [pc, #348]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004390:	4b55      	ldr	r3, [pc, #340]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004394:	4a54      	ldr	r2, [pc, #336]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004396:	f023 0304 	bic.w	r3, r3, #4
 800439a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd fda4 	bl	8001ef0 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd fda0 	bl	8001ef0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0cb      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	4b49      	ldr	r3, [pc, #292]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RCC_OscConfig+0x334>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d0:	f7fd fd8e 	bl	8001ef0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd fd8a 	bl	8001ef0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0b5      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ee:	4b3e      	ldr	r3, [pc, #248]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1ee      	bne.n	80043d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004400:	4b39      	ldr	r3, [pc, #228]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	4a38      	ldr	r2, [pc, #224]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a1 	beq.w	8004558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004416:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b08      	cmp	r3, #8
 8004420:	d05c      	beq.n	80044dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d141      	bne.n	80044ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b31      	ldr	r3, [pc, #196]	@ (80044f0 <HAL_RCC_OscConfig+0x478>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd fd5e 	bl	8001ef0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd fd5a 	bl	8001ef0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e087      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b27      	ldr	r3, [pc, #156]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	491b      	ldr	r1, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004480:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x478>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fd fd33 	bl	8001ef0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448e:	f7fd fd2f 	bl	8001ef0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e05c      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x416>
 80044ac:	e054      	b.n	8004558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_RCC_OscConfig+0x478>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd fd1c 	bl	8001ef0 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fd18 	bl	8001ef0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e045      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x444>
 80044da:	e03d      	b.n	8004558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e038      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40007000 	.word	0x40007000
 80044f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <HAL_RCC_OscConfig+0x4ec>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d028      	beq.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d121      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d11a      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800452a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452c:	4293      	cmp	r3, r2
 800452e:	d111      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	3b01      	subs	r3, #1
 800453e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0cc      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b68      	ldr	r3, [pc, #416]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d90c      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b65      	ldr	r3, [pc, #404]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a58      	ldr	r2, [pc, #352]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a52      	ldr	r2, [pc, #328]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d044      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b3f      	ldr	r3, [pc, #252]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e067      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b37      	ldr	r3, [pc, #220]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4934      	ldr	r1, [pc, #208]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fd fc4a 	bl	8001ef0 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fd fc46 	bl	8001ef0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e04f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d20c      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046da:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fbaa 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
 8004728:	08009194 	.word	0x08009194
 800472c:	20000004 	.word	0x20000004
 8004730:	20000008 	.word	0x20000008

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004738:	b094      	sub	sp, #80	@ 0x50
 800473a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474c:	4b79      	ldr	r3, [pc, #484]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d00d      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x40>
 8004758:	2b08      	cmp	r3, #8
 800475a:	f200 80e1 	bhi.w	8004920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x34>
 8004762:	2b04      	cmp	r3, #4
 8004764:	d003      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x3a>
 8004766:	e0db      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b73      	ldr	r3, [pc, #460]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x204>)
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800476c:	e0db      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476e:	4b73      	ldr	r3, [pc, #460]	@ (800493c <HAL_RCC_GetSysClockFreq+0x208>)
 8004770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004772:	e0d8      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004774:	4b6f      	ldr	r3, [pc, #444]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800477c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800477e:	4b6d      	ldr	r3, [pc, #436]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d063      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b6a      	ldr	r3, [pc, #424]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	2200      	movs	r2, #0
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004794:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	0159      	lsls	r1, r3, #5
 80047b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b8:	0150      	lsls	r0, r2, #5
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4621      	mov	r1, r4
 80047c0:	1a51      	subs	r1, r2, r1
 80047c2:	6139      	str	r1, [r7, #16]
 80047c4:	4629      	mov	r1, r5
 80047c6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d8:	4659      	mov	r1, fp
 80047da:	018b      	lsls	r3, r1, #6
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e2:	4651      	mov	r1, sl
 80047e4:	018a      	lsls	r2, r1, #6
 80047e6:	4651      	mov	r1, sl
 80047e8:	ebb2 0801 	subs.w	r8, r2, r1
 80047ec:	4659      	mov	r1, fp
 80047ee:	eb63 0901 	sbc.w	r9, r3, r1
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004806:	4690      	mov	r8, r2
 8004808:	4699      	mov	r9, r3
 800480a:	4623      	mov	r3, r4
 800480c:	eb18 0303 	adds.w	r3, r8, r3
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	462b      	mov	r3, r5
 8004814:	eb49 0303 	adc.w	r3, r9, r3
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004826:	4629      	mov	r1, r5
 8004828:	024b      	lsls	r3, r1, #9
 800482a:	4621      	mov	r1, r4
 800482c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004830:	4621      	mov	r1, r4
 8004832:	024a      	lsls	r2, r1, #9
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483a:	2200      	movs	r2, #0
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800483e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004844:	f7fb fcc6 	bl	80001d4 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004850:	e058      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004852:	4b38      	ldr	r3, [pc, #224]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	2200      	movs	r2, #0
 800485a:	4618      	mov	r0, r3
 800485c:	4611      	mov	r1, r2
 800485e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	2300      	movs	r3, #0
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
 8004868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	f04f 0000 	mov.w	r0, #0
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	0159      	lsls	r1, r3, #5
 800487a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487e:	0150      	lsls	r0, r2, #5
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4641      	mov	r1, r8
 8004886:	ebb2 0a01 	subs.w	sl, r2, r1
 800488a:	4649      	mov	r1, r9
 800488c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800489c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a4:	ebb2 040a 	subs.w	r4, r2, sl
 80048a8:	eb63 050b 	sbc.w	r5, r3, fp
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	00eb      	lsls	r3, r5, #3
 80048b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ba:	00e2      	lsls	r2, r4, #3
 80048bc:	4614      	mov	r4, r2
 80048be:	461d      	mov	r5, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	18e3      	adds	r3, r4, r3
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	464b      	mov	r3, r9
 80048c8:	eb45 0303 	adc.w	r3, r5, r3
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048da:	4629      	mov	r1, r5
 80048dc:	028b      	lsls	r3, r1, #10
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e4:	4621      	mov	r1, r4
 80048e6:	028a      	lsls	r2, r1, #10
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ee:	2200      	movs	r2, #0
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	61fa      	str	r2, [r7, #28]
 80048f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f8:	f7fb fc6c 	bl	80001d4 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004904:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	3301      	adds	r3, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004914:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800491e:	e002      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x204>)
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004928:	4618      	mov	r0, r3
 800492a:	3750      	adds	r7, #80	@ 0x50
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400
 800493c:	007a1200 	.word	0x007a1200

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004944:	4b03      	ldr	r3, [pc, #12]	@ (8004954 <HAL_RCC_GetHCLKFreq+0x14>)
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000004 	.word	0x20000004

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800495c:	f7ff fff0 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	@ (800497c <HAL_RCC_GetPCLK1Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	080091a4 	.word	0x080091a4

08004980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004984:	f7ff ffdc 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0b5b      	lsrs	r3, r3, #13
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	@ (80049a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	080091a4 	.word	0x080091a4

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d035      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049d0:	4b67      	ldr	r3, [pc, #412]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d6:	f7fd fa8b 	bl	8001ef0 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049de:	f7fd fa87 	bl	8001ef0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0ba      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f0:	4b60      	ldr	r3, [pc, #384]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	071b      	lsls	r3, r3, #28
 8004a08:	495a      	ldr	r1, [pc, #360]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a10:	4b57      	ldr	r3, [pc, #348]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a16:	f7fd fa6b 	bl	8001ef0 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a1e:	f7fd fa67 	bl	8001ef0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e09a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a30:	4b50      	ldr	r3, [pc, #320]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8083 	beq.w	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	4b49      	ldr	r3, [pc, #292]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	4a48      	ldr	r2, [pc, #288]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a5a:	4b46      	ldr	r3, [pc, #280]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a66:	4b44      	ldr	r3, [pc, #272]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a43      	ldr	r2, [pc, #268]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a72:	f7fd fa3d 	bl	8001ef0 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd fa39 	bl	8001ef0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e06c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a98:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004acc:	4a29      	ldr	r2, [pc, #164]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ad2:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d114      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fd fa07 	bl	8001ef0 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fd fa03 	bl	8001ef0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e034      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ee      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b14:	d10d      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b16:	4b17      	ldr	r3, [pc, #92]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	4912      	ldr	r1, [pc, #72]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
 8004b30:	e005      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4a0f      	ldr	r2, [pc, #60]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b3c:	6093      	str	r3, [r2, #8]
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	490a      	ldr	r1, [pc, #40]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1a      	ldrb	r2, [r3, #16]
 8004b60:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b62:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	42470068 	.word	0x42470068
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42470e40 	.word	0x42470e40
 8004b80:	424711e0 	.word	0x424711e0

08004b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d13f      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ba2:	4b24      	ldr	r3, [pc, #144]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bb8:	d12f      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bba:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bbc:	617b      	str	r3, [r7, #20]
          break;
 8004bbe:	e02f      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bcc:	d108      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bce:	4b19      	ldr	r3, [pc, #100]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd6:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e007      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004be0:	4b14      	ldr	r3, [pc, #80]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be8:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c04:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	0f1b      	lsrs	r3, r3, #28
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
          break;
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
          break;
 8004c1e:	bf00      	nop
        }
      }
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004c22:	bf00      	nop
    }
  }
  return frequency;
 8004c24:	697b      	ldr	r3, [r7, #20]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00bb8000 	.word	0x00bb8000
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07b      	b.n	8004d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c66:	d009      	beq.n	8004c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fe66 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	ea42 0103 	orr.w	r1, r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0104 	and.w	r1, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f003 0210 	and.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b088      	sub	sp, #32
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d66:	f7fd f8c3 	bl	8001ef0 <HAL_GetTick>
 8004d6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e12a      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x36>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e122      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Transmit+0x48>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e11b      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dec:	d10f      	bne.n	8004e0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b40      	cmp	r3, #64	@ 0x40
 8004e1a:	d007      	beq.n	8004e2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e34:	d152      	bne.n	8004edc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Transmit+0xee>
 8004e3e:	8b7b      	ldrh	r3, [r7, #26]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d145      	bne.n	8004ed0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e68:	e032      	b.n	8004ed0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d112      	bne.n	8004e9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e9c:	e018      	b.n	8004ed0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9e:	f7fd f827 	bl	8001ef0 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_Transmit+0x160>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_Transmit+0x166>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e082      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1c7      	bne.n	8004e6a <HAL_SPI_Transmit+0x114>
 8004eda:	e053      	b.n	8004f84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_Transmit+0x194>
 8004ee4:	8b7b      	ldrh	r3, [r7, #26]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d147      	bne.n	8004f7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f10:	e033      	b.n	8004f7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d113      	bne.n	8004f48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f46:	e018      	b.n	8004f7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f48:	f7fc ffd2 	bl	8001ef0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d803      	bhi.n	8004f60 <HAL_SPI_Transmit+0x20a>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f5e:	d102      	bne.n	8004f66 <HAL_SPI_Transmit+0x210>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e02d      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1c6      	bne.n	8004f12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fa59 	bl	8005440 <SPI_EndRxTxTransaction>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	@ 0x28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fc ff7e 	bl	8001ef0 <HAL_GetTick>
 8004ff4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ffc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d00c      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x4a>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005014:	d106      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x46>
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d001      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	e17f      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_SPI_TransmitReceive+0x5c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_TransmitReceive+0x5c>
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e174      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_SPI_TransmitReceive+0x6e>
 8005048:	2302      	movs	r3, #2
 800504a:	e16d      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2205      	movs	r2, #5
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c4:	d17e      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0xf6>
 80050ce:	8afb      	ldrh	r3, [r7, #22]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d16c      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e059      	b.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x162>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x162>
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b01      	cmp	r3, #1
 8005116:	d113      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d119      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1a4>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	b292      	uxth	r2, r2
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005182:	f7fc feb5 	bl	8001ef0 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518e:	429a      	cmp	r2, r3
 8005190:	d80d      	bhi.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005198:	d009      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0bc      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1a0      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x11c>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d19b      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x11c>
 80051c2:	e082      	b.n	80052ca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x1f4>
 80051cc:	8afb      	ldrh	r3, [r7, #22]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d171      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	7812      	ldrb	r2, [r2, #0]
 80051de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f8:	e05d      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d11c      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x264>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x264>
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	2b01      	cmp	r3, #1
 8005216:	d114      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x2a6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005284:	f7fc fe34 	bl	8001ef0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	429a      	cmp	r2, r3
 8005292:	d803      	bhi.n	800529c <HAL_SPI_TransmitReceive+0x2be>
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x2c4>
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e038      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d19c      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x21c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d197      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f8b6 	bl	8005440 <SPI_EndRxTxTransaction>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e01d      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	@ 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005340:	f7fc fdd6 	bl	8001ef0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005350:	f7fc fdce 	bl	8001ef0 <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005356:	4b39      	ldr	r3, [pc, #228]	@ (800543c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	0d1b      	lsrs	r3, r3, #20
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005366:	e054      	b.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536e:	d050      	beq.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005370:	f7fc fdbe 	bl	8001ef0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	429a      	cmp	r2, r3
 800537e:	d902      	bls.n	8005386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d13d      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539e:	d111      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d004      	beq.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d107      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d10f      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e017      	b.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3b01      	subs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d19b      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000004 	.word	0x20000004

08005440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2201      	movs	r2, #1
 8005454:	2102      	movs	r1, #2
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff ff6a 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e032      	b.n	80054d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005472:	4b1b      	ldr	r3, [pc, #108]	@ (80054e0 <SPI_EndRxTxTransaction+0xa0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <SPI_EndRxTxTransaction+0xa4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	0d5b      	lsrs	r3, r3, #21
 800547e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005490:	d112      	bne.n	80054b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	@ 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff ff47 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00f      	b.n	80054d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b80      	cmp	r3, #128	@ 0x80
 80054d0:	d0f2      	beq.n	80054b8 <SPI_EndRxTxTransaction+0x78>
 80054d2:	e000      	b.n	80054d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80054d4:	bf00      	nop
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000004 	.word	0x20000004
 80054e4:	165e9f81 	.word	0x165e9f81

080054e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e041      	b.n	800557e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fa72 	bl	80019f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 f8f0 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0ae      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	f200 809f 	bhi.w	80056f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080056f5 	.word	0x080056f5
 80055c4:	080056f5 	.word	0x080056f5
 80055c8:	080056f5 	.word	0x080056f5
 80055cc:	08005631 	.word	0x08005631
 80055d0:	080056f5 	.word	0x080056f5
 80055d4:	080056f5 	.word	0x080056f5
 80055d8:	080056f5 	.word	0x080056f5
 80055dc:	08005673 	.word	0x08005673
 80055e0:	080056f5 	.word	0x080056f5
 80055e4:	080056f5 	.word	0x080056f5
 80055e8:	080056f5 	.word	0x080056f5
 80055ec:	080056b3 	.word	0x080056b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f914 	bl	8005824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	619a      	str	r2, [r3, #24]
      break;
 800562e:	e064      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f95a 	bl	80058f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	619a      	str	r2, [r3, #24]
      break;
 8005670:	e043      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f9a5 	bl	80059c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
      break;
 80056b0:	e023      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f9ef 	bl	8005a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	021a      	lsls	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	61da      	str	r2, [r3, #28]
      break;
 80056f2:	e002      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
      break;
 80056f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3a      	ldr	r2, [pc, #232]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d00b      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a37      	ldr	r2, [pc, #220]	@ (800580c <TIM_Base_SetConfig+0x100>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a36      	ldr	r2, [pc, #216]	@ (8005810 <TIM_Base_SetConfig+0x104>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a35      	ldr	r2, [pc, #212]	@ (8005814 <TIM_Base_SetConfig+0x108>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2b      	ldr	r2, [pc, #172]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005764:	d017      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a28      	ldr	r2, [pc, #160]	@ (800580c <TIM_Base_SetConfig+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a27      	ldr	r2, [pc, #156]	@ (8005810 <TIM_Base_SetConfig+0x104>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a26      	ldr	r2, [pc, #152]	@ (8005814 <TIM_Base_SetConfig+0x108>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a25      	ldr	r2, [pc, #148]	@ (8005818 <TIM_Base_SetConfig+0x10c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a24      	ldr	r2, [pc, #144]	@ (800581c <TIM_Base_SetConfig+0x110>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <TIM_Base_SetConfig+0x114>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d105      	bne.n	80057fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]
  }
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800

08005824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f023 0201 	bic.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 0302 	bic.w	r3, r3, #2
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1c      	ldr	r2, [pc, #112]	@ (80058ec <TIM_OC1_SetConfig+0xc8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0308 	bic.w	r3, r3, #8
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 0304 	bic.w	r3, r3, #4
 8005898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a13      	ldr	r2, [pc, #76]	@ (80058ec <TIM_OC1_SetConfig+0xc8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d111      	bne.n	80058c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40010000 	.word	0x40010000

080058f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f023 0210 	bic.w	r2, r3, #16
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0320 	bic.w	r3, r3, #32
 800593a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a1e      	ldr	r2, [pc, #120]	@ (80059c4 <TIM_OC2_SetConfig+0xd4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d10d      	bne.n	800596c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800596a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <TIM_OC2_SetConfig+0xd4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d113      	bne.n	800599c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800597a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000

080059c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <TIM_OC3_SetConfig+0xd0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10d      	bne.n	8005a42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a14      	ldr	r2, [pc, #80]	@ (8005a98 <TIM_OC3_SetConfig+0xd0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d113      	bne.n	8005a72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40010000 	.word	0x40010000

08005a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	031b      	lsls	r3, r3, #12
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <TIM_OC4_SetConfig+0x9c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d109      	bne.n	8005b10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	019b      	lsls	r3, r3, #6
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e050      	b.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	@ (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba0:	d013      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	@ (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00e      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a15      	ldr	r2, [pc, #84]	@ (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a13      	ldr	r2, [pc, #76]	@ (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10c      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40014000 	.word	0x40014000

08005c18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e03d      	b.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e042      	b.n	8005d54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fb ff20 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	@ 0x24
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f82b 	bl	8005d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d60:	b0c0      	sub	sp, #256	@ 0x100
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	68d9      	ldr	r1, [r3, #12]
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	ea40 0301 	orr.w	r3, r0, r1
 8005d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005db4:	f021 010c 	bic.w	r1, r1, #12
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	6999      	ldr	r1, [r3, #24]
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	ea40 0301 	orr.w	r3, r0, r1
 8005de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b8f      	ldr	r3, [pc, #572]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d005      	beq.n	8005dfc <UART_SetConfig+0xa0>
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b8d      	ldr	r3, [pc, #564]	@ (800602c <UART_SetConfig+0x2d0>)
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d104      	bne.n	8005e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fe fdc0 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8005e00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e04:	e003      	b.n	8005e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e06:	f7fe fda7 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 8005e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e18:	f040 810c 	bne.w	8006034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e36:	415b      	adcs	r3, r3
 8005e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e3e:	4621      	mov	r1, r4
 8005e40:	eb12 0801 	adds.w	r8, r2, r1
 8005e44:	4629      	mov	r1, r5
 8005e46:	eb43 0901 	adc.w	r9, r3, r1
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	eb18 0303 	adds.w	r3, r8, r3
 8005e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	eb49 0303 	adc.w	r3, r9, r3
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	18db      	adds	r3, r3, r3
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e90:	4613      	mov	r3, r2
 8005e92:	eb42 0303 	adc.w	r3, r2, r3
 8005e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ea0:	f7fa f998 	bl	80001d4 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4b61      	ldr	r3, [pc, #388]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	011c      	lsls	r4, r3, #4
 8005eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eda:	4649      	mov	r1, r9
 8005edc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef4:	4692      	mov	sl, r2
 8005ef6:	469b      	mov	fp, r3
 8005ef8:	4643      	mov	r3, r8
 8005efa:	eb1a 0303 	adds.w	r3, sl, r3
 8005efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f02:	464b      	mov	r3, r9
 8005f04:	eb4b 0303 	adc.w	r3, fp, r3
 8005f08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f20:	460b      	mov	r3, r1
 8005f22:	18db      	adds	r3, r3, r3
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	4613      	mov	r3, r2
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f36:	f7fa f94d 	bl	80001d4 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4b3b      	ldr	r3, [pc, #236]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005f42:	fba3 2301 	umull	r2, r3, r3, r1
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	2264      	movs	r2, #100	@ 0x64
 8005f4a:	fb02 f303 	mul.w	r3, r2, r3
 8005f4e:	1acb      	subs	r3, r1, r3
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f56:	4b36      	ldr	r3, [pc, #216]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005f58:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f64:	441c      	add	r4, r3
 8005f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	1891      	adds	r1, r2, r2
 8005f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f80:	415b      	adcs	r3, r3
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f88:	4641      	mov	r1, r8
 8005f8a:	1851      	adds	r1, r2, r1
 8005f8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f8e:	4649      	mov	r1, r9
 8005f90:	414b      	adcs	r3, r1
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	00cb      	lsls	r3, r1, #3
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005faa:	4651      	mov	r1, sl
 8005fac:	00ca      	lsls	r2, r1, #3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fdc:	460b      	mov	r3, r1
 8005fde:	18db      	adds	r3, r3, r3
 8005fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ff2:	f7fa f8ef 	bl	80001d4 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	@ 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	3332      	adds	r3, #50	@ 0x32
 800600e:	4a08      	ldr	r2, [pc, #32]	@ (8006030 <UART_SetConfig+0x2d4>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 0207 	and.w	r2, r3, #7
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4422      	add	r2, r4
 8006022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006024:	e106      	b.n	8006234 <UART_SetConfig+0x4d8>
 8006026:	bf00      	nop
 8006028:	40011000 	.word	0x40011000
 800602c:	40011400 	.word	0x40011400
 8006030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800603e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	1891      	adds	r1, r2, r2
 800604c:	6239      	str	r1, [r7, #32]
 800604e:	415b      	adcs	r3, r3
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006056:	4641      	mov	r1, r8
 8006058:	1854      	adds	r4, r2, r1
 800605a:	4649      	mov	r1, r9
 800605c:	eb43 0501 	adc.w	r5, r3, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	00eb      	lsls	r3, r5, #3
 800606a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606e:	00e2      	lsls	r2, r4, #3
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	4643      	mov	r3, r8
 8006076:	18e3      	adds	r3, r4, r3
 8006078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800607c:	464b      	mov	r3, r9
 800607e:	eb45 0303 	adc.w	r3, r5, r3
 8006082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060a2:	4629      	mov	r1, r5
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	4621      	mov	r1, r4
 80060a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ac:	4621      	mov	r1, r4
 80060ae:	008a      	lsls	r2, r1, #2
 80060b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060b4:	f7fa f88e 	bl	80001d4 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4b60      	ldr	r3, [pc, #384]	@ (8006240 <UART_SetConfig+0x4e4>)
 80060be:	fba3 2302 	umull	r2, r3, r3, r2
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	011c      	lsls	r4, r3, #4
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	1891      	adds	r1, r2, r2
 80060de:	61b9      	str	r1, [r7, #24]
 80060e0:	415b      	adcs	r3, r3
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060e8:	4641      	mov	r1, r8
 80060ea:	1851      	adds	r1, r2, r1
 80060ec:	6139      	str	r1, [r7, #16]
 80060ee:	4649      	mov	r1, r9
 80060f0:	414b      	adcs	r3, r1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006100:	4659      	mov	r1, fp
 8006102:	00cb      	lsls	r3, r1, #3
 8006104:	4651      	mov	r1, sl
 8006106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610a:	4651      	mov	r1, sl
 800610c:	00ca      	lsls	r2, r1, #3
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	4603      	mov	r3, r0
 8006114:	4642      	mov	r2, r8
 8006116:	189b      	adds	r3, r3, r2
 8006118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800611c:	464b      	mov	r3, r9
 800611e:	460a      	mov	r2, r1
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006140:	4649      	mov	r1, r9
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	4641      	mov	r1, r8
 8006146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614a:	4641      	mov	r1, r8
 800614c:	008a      	lsls	r2, r1, #2
 800614e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006152:	f7fa f83f 	bl	80001d4 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4611      	mov	r1, r2
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <UART_SetConfig+0x4e4>)
 800615e:	fba3 2301 	umull	r2, r3, r3, r1
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2264      	movs	r2, #100	@ 0x64
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	1acb      	subs	r3, r1, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	@ 0x32
 8006170:	4a33      	ldr	r2, [pc, #204]	@ (8006240 <UART_SetConfig+0x4e4>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	673b      	str	r3, [r7, #112]	@ 0x70
 8006186:	677a      	str	r2, [r7, #116]	@ 0x74
 8006188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	415b      	adcs	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800619c:	4641      	mov	r1, r8
 800619e:	1851      	adds	r1, r2, r1
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	4649      	mov	r1, r9
 80061a4:	414b      	adcs	r3, r1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061b4:	4659      	mov	r1, fp
 80061b6:	00cb      	lsls	r3, r1, #3
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061be:	4651      	mov	r1, sl
 80061c0:	00ca      	lsls	r2, r1, #3
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	4642      	mov	r2, r8
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ce:	464b      	mov	r3, r9
 80061d0:	460a      	mov	r2, r1
 80061d2:	eb42 0303 	adc.w	r3, r2, r3
 80061d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061f0:	4649      	mov	r1, r9
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	4641      	mov	r1, r8
 80061f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fa:	4641      	mov	r1, r8
 80061fc:	008a      	lsls	r2, r1, #2
 80061fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006202:	f7f9 ffe7 	bl	80001d4 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <UART_SetConfig+0x4e4>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	@ 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3332      	adds	r3, #50	@ 0x32
 800621e:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <UART_SetConfig+0x4e4>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4422      	add	r2, r4
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006240:	51eb851f 	.word	0x51eb851f

08006244 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006248:	4904      	ldr	r1, [pc, #16]	@ (800625c <MX_FATFS_Init+0x18>)
 800624a:	4805      	ldr	r0, [pc, #20]	@ (8006260 <MX_FATFS_Init+0x1c>)
 800624c:	f002 fa78 	bl	8008740 <FATFS_LinkDriver>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	4b03      	ldr	r3, [pc, #12]	@ (8006264 <MX_FATFS_Init+0x20>)
 8006256:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200045c0 	.word	0x200045c0
 8006260:	20000010 	.word	0x20000010
 8006264:	200045bc 	.word	0x200045bc

08006268 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800626c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800626e:	4618      	mov	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4618      	mov	r0, r3
 8006286:	f7fa fad7 	bl	8000838 <SD_disk_initialize>
 800628a:	4603      	mov	r3, r0
 800628c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	4603      	mov	r3, r0
 800629e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa fbb4 	bl	8000a10 <SD_disk_status>
 80062a8:	4603      	mov	r3, r0
 80062aa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80062c4:	7bf8      	ldrb	r0, [r7, #15]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	f7fa fbb6 	bl	8000a3c <SD_disk_read>
 80062d0:	4603      	mov	r3, r0
 80062d2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80062ec:	7bf8      	ldrb	r0, [r7, #15]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	f7fa fc0c 	bl	8000b10 <SD_disk_write>
 80062f8:	4603      	mov	r3, r0
 80062fa:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	603a      	str	r2, [r7, #0]
 800630e:	71fb      	strb	r3, [r7, #7]
 8006310:	460b      	mov	r3, r1
 8006312:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	79b9      	ldrb	r1, [r7, #6]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa fc7a 	bl	8000c18 <SD_disk_ioctl>
 8006324:	4603      	mov	r3, r0
 8006326:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	4a08      	ldr	r2, [pc, #32]	@ (8006360 <disk_status+0x30>)
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	4905      	ldr	r1, [pc, #20]	@ (8006360 <disk_status+0x30>)
 800634a:	440a      	add	r2, r1
 800634c:	7a12      	ldrb	r2, [r2, #8]
 800634e:	4610      	mov	r0, r2
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200045ec 	.word	0x200045ec

08006364 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	4a0e      	ldr	r2, [pc, #56]	@ (80063b0 <disk_initialize+0x4c>)
 8006376:	5cd3      	ldrb	r3, [r2, r3]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <disk_initialize+0x4c>)
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	79fa      	ldrb	r2, [r7, #7]
 800638a:	4909      	ldr	r1, [pc, #36]	@ (80063b0 <disk_initialize+0x4c>)
 800638c:	440a      	add	r2, r1
 800638e:	7a12      	ldrb	r2, [r2, #8]
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	4a03      	ldr	r2, [pc, #12]	@ (80063b0 <disk_initialize+0x4c>)
 80063a2:	2101      	movs	r1, #1
 80063a4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200045ec 	.word	0x200045ec

080063b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	4a0a      	ldr	r2, [pc, #40]	@ (80063f0 <disk_read+0x3c>)
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	689c      	ldr	r4, [r3, #8]
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	4a07      	ldr	r2, [pc, #28]	@ (80063f0 <disk_read+0x3c>)
 80063d4:	4413      	add	r3, r2
 80063d6:	7a18      	ldrb	r0, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	47a0      	blx	r4
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200045ec 	.word	0x200045ec

080063f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <disk_write+0x3c>)
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	68dc      	ldr	r4, [r3, #12]
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	4a07      	ldr	r2, [pc, #28]	@ (8006430 <disk_write+0x3c>)
 8006414:	4413      	add	r3, r2
 8006416:	7a18      	ldrb	r0, [r3, #8]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	47a0      	blx	r4
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
  return res;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}
 800642e:	bf00      	nop
 8006430:	200045ec 	.word	0x200045ec

08006434 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3301      	adds	r3, #1
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006444:	89fb      	ldrh	r3, [r7, #14]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	b21a      	sxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	b21b      	sxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b21b      	sxth	r3, r3
 8006454:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006456:	89fb      	ldrh	r3, [r7, #14]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3303      	adds	r3, #3
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	3202      	adds	r2, #2
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	3201      	adds	r2, #1
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
	return rv;
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	887a      	ldrh	r2, [r7, #2]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	887b      	ldrh	r3, [r7, #2]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	0a1b      	lsrs	r3, r3, #8
 80064fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	1c53      	adds	r3, r2, #1
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	6179      	str	r1, [r7, #20]
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <mem_cpy+0x1a>
	}
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800657a:	b480      	push	{r7}
 800657c:	b087      	sub	sp, #28
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	617a      	str	r2, [r7, #20]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3b01      	subs	r3, #1
 800659a:	607b      	str	r3, [r7, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f3      	bne.n	800658a <mem_set+0x10>
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80065b0:	b480      	push	{r7}
 80065b2:	b089      	sub	sp, #36	@ 0x24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	61fa      	str	r2, [r7, #28]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	4619      	mov	r1, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	61ba      	str	r2, [r7, #24]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	1acb      	subs	r3, r1, r3
 80065dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	607b      	str	r3, [r7, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <mem_cmp+0x40>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0eb      	beq.n	80065c8 <mem_cmp+0x18>

	return r;
 80065f0:	697b      	ldr	r3, [r7, #20]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3724      	adds	r7, #36	@ 0x24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006608:	e002      	b.n	8006610 <chk_chr+0x12>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3301      	adds	r3, #1
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <chk_chr+0x26>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	4293      	cmp	r3, r2
 8006622:	d1f2      	bne.n	800660a <chk_chr+0xc>
	return *str;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e029      	b.n	800669c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006648:	4a27      	ldr	r2, [pc, #156]	@ (80066e8 <chk_lock+0xb4>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01d      	beq.n	8006692 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006656:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <chk_lock+0xb4>)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d116      	bne.n	8006696 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006668:	4a1f      	ldr	r2, [pc, #124]	@ (80066e8 <chk_lock+0xb4>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	3304      	adds	r3, #4
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006678:	429a      	cmp	r2, r3
 800667a:	d10c      	bne.n	8006696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800667c:	4a1a      	ldr	r2, [pc, #104]	@ (80066e8 <chk_lock+0xb4>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	4413      	add	r3, r2
 8006684:	3308      	adds	r3, #8
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800668c:	429a      	cmp	r2, r3
 800668e:	d102      	bne.n	8006696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006690:	e007      	b.n	80066a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006692:	2301      	movs	r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d9d2      	bls.n	8006648 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d109      	bne.n	80066bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <chk_lock+0x80>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d101      	bne.n	80066b8 <chk_lock+0x84>
 80066b4:	2300      	movs	r3, #0
 80066b6:	e010      	b.n	80066da <chk_lock+0xa6>
 80066b8:	2312      	movs	r3, #18
 80066ba:	e00e      	b.n	80066da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d108      	bne.n	80066d4 <chk_lock+0xa0>
 80066c2:	4a09      	ldr	r2, [pc, #36]	@ (80066e8 <chk_lock+0xb4>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	330c      	adds	r3, #12
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d2:	d101      	bne.n	80066d8 <chk_lock+0xa4>
 80066d4:	2310      	movs	r3, #16
 80066d6:	e000      	b.n	80066da <chk_lock+0xa6>
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200045cc 	.word	0x200045cc

080066ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	e002      	b.n	80066fe <enq_lock+0x12>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3301      	adds	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d806      	bhi.n	8006712 <enq_lock+0x26>
 8006704:	4a09      	ldr	r2, [pc, #36]	@ (800672c <enq_lock+0x40>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	4413      	add	r3, r2
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f2      	bne.n	80066f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b02      	cmp	r3, #2
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	200045cc 	.word	0x200045cc

08006730 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e01f      	b.n	8006780 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006740:	4a41      	ldr	r2, [pc, #260]	@ (8006848 <inc_lock+0x118>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	4413      	add	r3, r2
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d113      	bne.n	800677a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006752:	4a3d      	ldr	r2, [pc, #244]	@ (8006848 <inc_lock+0x118>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006762:	429a      	cmp	r2, r3
 8006764:	d109      	bne.n	800677a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006766:	4a38      	ldr	r2, [pc, #224]	@ (8006848 <inc_lock+0x118>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4413      	add	r3, r2
 800676e:	3308      	adds	r3, #8
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006776:	429a      	cmp	r2, r3
 8006778:	d006      	beq.n	8006788 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d9dc      	bls.n	8006740 <inc_lock+0x10>
 8006786:	e000      	b.n	800678a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006788:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d132      	bne.n	80067f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e002      	b.n	800679c <inc_lock+0x6c>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d806      	bhi.n	80067b0 <inc_lock+0x80>
 80067a2:	4a29      	ldr	r2, [pc, #164]	@ (8006848 <inc_lock+0x118>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4413      	add	r3, r2
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f2      	bne.n	8006796 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d101      	bne.n	80067ba <inc_lock+0x8a>
 80067b6:	2300      	movs	r3, #0
 80067b8:	e040      	b.n	800683c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4922      	ldr	r1, [pc, #136]	@ (8006848 <inc_lock+0x118>)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	440b      	add	r3, r1
 80067c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	491e      	ldr	r1, [pc, #120]	@ (8006848 <inc_lock+0x118>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	440b      	add	r3, r1
 80067d4:	3304      	adds	r3, #4
 80067d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	491a      	ldr	r1, [pc, #104]	@ (8006848 <inc_lock+0x118>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	440b      	add	r3, r1
 80067e4:	3308      	adds	r3, #8
 80067e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067e8:	4a17      	ldr	r2, [pc, #92]	@ (8006848 <inc_lock+0x118>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	4413      	add	r3, r2
 80067f0:	330c      	adds	r3, #12
 80067f2:	2200      	movs	r2, #0
 80067f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <inc_lock+0xe0>
 80067fc:	4a12      	ldr	r2, [pc, #72]	@ (8006848 <inc_lock+0x118>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	4413      	add	r3, r2
 8006804:	330c      	adds	r3, #12
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <inc_lock+0xe0>
 800680c:	2300      	movs	r3, #0
 800680e:	e015      	b.n	800683c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d108      	bne.n	8006828 <inc_lock+0xf8>
 8006816:	4a0c      	ldr	r2, [pc, #48]	@ (8006848 <inc_lock+0x118>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4413      	add	r3, r2
 800681e:	330c      	adds	r3, #12
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	e001      	b.n	800682c <inc_lock+0xfc>
 8006828:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800682c:	4906      	ldr	r1, [pc, #24]	@ (8006848 <inc_lock+0x118>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	440b      	add	r3, r1
 8006834:	330c      	adds	r3, #12
 8006836:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	200045cc 	.word	0x200045cc

0800684c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e010      	b.n	800687c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800685a:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <clear_lock+0x44>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d105      	bne.n	8006876 <clear_lock+0x2a>
 800686a:	4a09      	ldr	r2, [pc, #36]	@ (8006890 <clear_lock+0x44>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	4413      	add	r3, r2
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d9eb      	bls.n	800685a <clear_lock+0xe>
	}
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200045cc 	.word	0x200045cc

08006894 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	78db      	ldrb	r3, [r3, #3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d034      	beq.n	8006912 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7858      	ldrb	r0, [r3, #1]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80068b8:	2301      	movs	r3, #1
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f7ff fd9a 	bl	80063f4 <disk_write>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
 80068ca:	e022      	b.n	8006912 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d217      	bcs.n	8006912 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	e010      	b.n	800690c <sync_window+0x78>
					wsect += fs->fsize;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7858      	ldrb	r0, [r3, #1]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80068fe:	2301      	movs	r3, #1
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	f7ff fd77 	bl	80063f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3b01      	subs	r3, #1
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d8eb      	bhi.n	80068ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d01b      	beq.n	800696c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ffad 	bl	8006894 <sync_window>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d113      	bne.n	800696c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	7858      	ldrb	r0, [r3, #1]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800694e:	2301      	movs	r3, #1
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	f7ff fd2f 	bl	80063b4 <disk_read>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800695c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006960:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	3b02      	subs	r3, #2
 8006984:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	3b02      	subs	r3, #2
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d301      	bcc.n	8006996 <clust2sect+0x20>
 8006992:	2300      	movs	r3, #0
 8006994:	e008      	b.n	80069a8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	895b      	ldrh	r3, [r3, #10]
 800699a:	461a      	mov	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	fb03 f202 	mul.w	r2, r3, r2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a6:	4413      	add	r3, r2
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d904      	bls.n	80069d4 <get_fat+0x20>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d302      	bcc.n	80069da <get_fat+0x26>
		val = 1;	/* Internal error */
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e08e      	b.n	8006af8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069de:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d061      	beq.n	8006aac <get_fat+0xf8>
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	dc7b      	bgt.n	8006ae4 <get_fat+0x130>
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d002      	beq.n	80069f6 <get_fat+0x42>
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d041      	beq.n	8006a78 <get_fat+0xc4>
 80069f4:	e076      	b.n	8006ae4 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0a5b      	lsrs	r3, r3, #9
 8006a0c:	4413      	add	r3, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7ff ff83 	bl	800691c <move_window>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d166      	bne.n	8006aea <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	60fa      	str	r2, [r7, #12]
 8006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a2e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	0a5b      	lsrs	r3, r3, #9
 8006a38:	4413      	add	r3, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6938      	ldr	r0, [r7, #16]
 8006a3e:	f7ff ff6d 	bl	800691c <move_window>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d152      	bne.n	8006aee <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4413      	add	r3, r2
 8006a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <get_fat+0xba>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	091b      	lsrs	r3, r3, #4
 8006a6c:	e002      	b.n	8006a74 <get_fat+0xc0>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a74:	617b      	str	r3, [r7, #20]
			break;
 8006a76:	e03f      	b.n	8006af8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	4413      	add	r3, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	6938      	ldr	r0, [r7, #16]
 8006a86:	f7ff ff49 	bl	800691c <move_window>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d130      	bne.n	8006af2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006a9e:	4413      	add	r3, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fcc7 	bl	8006434 <ld_word>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	617b      	str	r3, [r7, #20]
			break;
 8006aaa:	e025      	b.n	8006af8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	09db      	lsrs	r3, r3, #7
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6938      	ldr	r0, [r7, #16]
 8006aba:	f7ff ff2f 	bl	800691c <move_window>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d118      	bne.n	8006af6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006ad2:	4413      	add	r3, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fcc5 	bl	8006464 <ld_dword>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006ae0:	617b      	str	r3, [r7, #20]
			break;
 8006ae2:	e009      	b.n	8006af8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e006      	b.n	8006af8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aea:	bf00      	nop
 8006aec:	e004      	b.n	8006af8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006af6:	bf00      	nop
		}
	}

	return val;
 8006af8:	697b      	ldr	r3, [r7, #20]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006b02:	b590      	push	{r4, r7, lr}
 8006b04:	b089      	sub	sp, #36	@ 0x24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	f240 80d9 	bls.w	8006ccc <put_fat+0x1ca>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	f080 80d3 	bcs.w	8006ccc <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	f000 8096 	beq.w	8006c5c <put_fat+0x15a>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	f300 80cb 	bgt.w	8006ccc <put_fat+0x1ca>
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d002      	beq.n	8006b40 <put_fat+0x3e>
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d06e      	beq.n	8006c1c <put_fat+0x11a>
 8006b3e:	e0c5      	b.n	8006ccc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	0a5b      	lsrs	r3, r3, #9
 8006b56:	4413      	add	r3, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fede 	bl	800691c <move_window>
 8006b60:	4603      	mov	r3, r0
 8006b62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b64:	7ffb      	ldrb	r3, [r7, #31]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 80a9 	bne.w	8006cbe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	61b9      	str	r1, [r7, #24]
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	4413      	add	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <put_fat+0xa4>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	b25a      	sxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b25b      	sxtb	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e001      	b.n	8006baa <put_fat+0xa8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	0a5b      	lsrs	r3, r3, #9
 8006bbc:	4413      	add	r3, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff feab 	bl	800691c <move_window>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d178      	bne.n	8006cc2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	4413      	add	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <put_fat+0xf0>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	e00e      	b.n	8006c10 <put_fat+0x10e>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	f023 030f 	bic.w	r3, r3, #15
 8006bfc:	b25a      	sxtb	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	70da      	strb	r2, [r3, #3]
			break;
 8006c1a:	e057      	b.n	8006ccc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	4413      	add	r3, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff fe77 	bl	800691c <move_window>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c32:	7ffb      	ldrb	r3, [r7, #31]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d146      	bne.n	8006cc6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006c46:	4413      	add	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fc2b 	bl	80064aa <st_word>
			fs->wflag = 1;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	70da      	strb	r2, [r3, #3]
			break;
 8006c5a:	e037      	b.n	8006ccc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	4413      	add	r3, r2
 8006c66:	4619      	mov	r1, r3
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fe57 	bl	800691c <move_window>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d128      	bne.n	8006cca <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c8c:	4413      	add	r3, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fbe8 	bl	8006464 <ld_dword>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c9a:	4323      	orrs	r3, r4
 8006c9c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006cac:	4413      	add	r3, r2
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fc15 	bl	80064e0 <st_dword>
			fs->wflag = 1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	70da      	strb	r2, [r3, #3]
			break;
 8006cbc:	e006      	b.n	8006ccc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006cbe:	bf00      	nop
 8006cc0:	e004      	b.n	8006ccc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006cca:	bf00      	nop
		}
	}
	return res;
 8006ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3724      	adds	r7, #36	@ 0x24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}

08006cd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d904      	bls.n	8006cfc <remove_chain+0x26>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d301      	bcc.n	8006d00 <remove_chain+0x2a>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e04b      	b.n	8006d98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	69b8      	ldr	r0, [r7, #24]
 8006d0e:	f7ff fef8 	bl	8006b02 <put_fat>
 8006d12:	4603      	mov	r3, r0
 8006d14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006d16:	7ffb      	ldrb	r3, [r7, #31]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <remove_chain+0x4a>
 8006d1c:	7ffb      	ldrb	r3, [r7, #31]
 8006d1e:	e03b      	b.n	8006d98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fe46 	bl	80069b4 <get_fat>
 8006d28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d031      	beq.n	8006d94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <remove_chain+0x64>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e02e      	b.n	8006d98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d40:	d101      	bne.n	8006d46 <remove_chain+0x70>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e028      	b.n	8006d98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d46:	2200      	movs	r2, #0
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	69b8      	ldr	r0, [r7, #24]
 8006d4c:	f7ff fed9 	bl	8006b02 <put_fat>
 8006d50:	4603      	mov	r3, r0
 8006d52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006d54:	7ffb      	ldrb	r3, [r7, #31]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <remove_chain+0x88>
 8006d5a:	7ffb      	ldrb	r3, [r7, #31]
 8006d5c:	e01c      	b.n	8006d98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	3b02      	subs	r3, #2
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d20b      	bcs.n	8006d84 <remove_chain+0xae>
			fs->free_clst++;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	791b      	ldrb	r3, [r3, #4]
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3c6      	bcc.n	8006d20 <remove_chain+0x4a>
 8006d92:	e000      	b.n	8006d96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10d      	bne.n	8006dd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <create_chain+0x2c>
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d31b      	bcc.n	8006e04 <create_chain+0x64>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	e018      	b.n	8006e04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fded 	bl	80069b4 <get_fat>
 8006dda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d801      	bhi.n	8006de6 <create_chain+0x46>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e070      	b.n	8006ec8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dec:	d101      	bne.n	8006df2 <create_chain+0x52>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	e06a      	b.n	8006ec8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d201      	bcs.n	8006e00 <create_chain+0x60>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	e063      	b.n	8006ec8 <create_chain+0x128>
		scl = clst;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d307      	bcc.n	8006e28 <create_chain+0x88>
				ncl = 2;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d901      	bls.n	8006e28 <create_chain+0x88>
 8006e24:	2300      	movs	r3, #0
 8006e26:	e04f      	b.n	8006ec8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e28:	69f9      	ldr	r1, [r7, #28]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fdc2 	bl	80069b4 <get_fat>
 8006e30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <create_chain+0xa6>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e44:	d101      	bne.n	8006e4a <create_chain+0xaa>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	e03e      	b.n	8006ec8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d1da      	bne.n	8006e08 <create_chain+0x68>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e038      	b.n	8006ec8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006e56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7ff fe4f 	bl	8006b02 <put_fat>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <create_chain+0xe2>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d006      	beq.n	8006e82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6938      	ldr	r0, [r7, #16]
 8006e7a:	f7ff fe42 	bl	8006b02 <put_fat>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d116      	bne.n	8006eb6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	3b02      	subs	r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d804      	bhi.n	8006ea6 <create_chain+0x106>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	711a      	strb	r2, [r3, #4]
 8006eb4:	e007      	b.n	8006ec6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d102      	bne.n	8006ec2 <create_chain+0x122>
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ec0:	e000      	b.n	8006ec4 <create_chain+0x124>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	0a5b      	lsrs	r3, r3, #9
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	8952      	ldrh	r2, [r2, #10]
 8006ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1d1a      	adds	r2, r3, #4
 8006efa:	613a      	str	r2, [r7, #16]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <clmt_clust+0x3a>
 8006f06:	2300      	movs	r3, #0
 8006f08:	e010      	b.n	8006f2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d307      	bcc.n	8006f22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f20:	e7e9      	b.n	8006ef6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006f22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4413      	add	r3, r2
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f4e:	d204      	bcs.n	8006f5a <dir_sdi+0x22>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e063      	b.n	8007026 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <dir_sdi+0x46>
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d902      	bls.n	8006f7e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10c      	bne.n	8006f9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	8912      	ldrh	r2, [r2, #8]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d301      	bcc.n	8006f94 <dir_sdi+0x5c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e048      	b.n	8007026 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	61da      	str	r2, [r3, #28]
 8006f9c:	e029      	b.n	8006ff2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	895b      	ldrh	r3, [r3, #10]
 8006fa2:	025b      	lsls	r3, r3, #9
 8006fa4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fa6:	e019      	b.n	8006fdc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff fd01 	bl	80069b4 <get_fat>
 8006fb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fba:	d101      	bne.n	8006fc0 <dir_sdi+0x88>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e032      	b.n	8007026 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d904      	bls.n	8006fd0 <dir_sdi+0x98>
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d301      	bcc.n	8006fd4 <dir_sdi+0x9c>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e028      	b.n	8007026 <dir_sdi+0xee>
			ofs -= csz;
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d2e1      	bcs.n	8006fa8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	6938      	ldr	r0, [r7, #16]
 8006fe8:	f7ff fcc5 	bl	8006976 <clust2sect>
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <dir_sdi+0xcc>
 8007000:	2302      	movs	r3, #2
 8007002:	e010      	b.n	8007026 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	0a5b      	lsrs	r3, r3, #9
 800700c:	441a      	add	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	441a      	add	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	3320      	adds	r3, #32
 8007044:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <dir_next+0x28>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007054:	d301      	bcc.n	800705a <dir_next+0x2c>
 8007056:	2304      	movs	r3, #4
 8007058:	e0aa      	b.n	80071b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 8098 	bne.w	8007196 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	8912      	ldrh	r2, [r2, #8]
 8007080:	4293      	cmp	r3, r2
 8007082:	f0c0 8088 	bcc.w	8007196 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	61da      	str	r2, [r3, #28]
 800708c:	2304      	movs	r3, #4
 800708e:	e08f      	b.n	80071b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	0a5b      	lsrs	r3, r3, #9
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	8952      	ldrh	r2, [r2, #10]
 8007098:	3a01      	subs	r2, #1
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d17a      	bne.n	8007196 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7ff fc83 	bl	80069b4 <get_fat>
 80070ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d801      	bhi.n	80070ba <dir_next+0x8c>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e07a      	b.n	80071b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070c0:	d101      	bne.n	80070c6 <dir_next+0x98>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e074      	b.n	80071b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d358      	bcc.n	8007182 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	61da      	str	r2, [r3, #28]
 80070dc:	2304      	movs	r3, #4
 80070de:	e067      	b.n	80071b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	4619      	mov	r1, r3
 80070e8:	4610      	mov	r0, r2
 80070ea:	f7ff fe59 	bl	8006da0 <create_chain>
 80070ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <dir_next+0xcc>
 80070f6:	2307      	movs	r3, #7
 80070f8:	e05a      	b.n	80071b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <dir_next+0xd6>
 8007100:	2302      	movs	r3, #2
 8007102:	e055      	b.n	80071b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800710a:	d101      	bne.n	8007110 <dir_next+0xe2>
 800710c:	2301      	movs	r3, #1
 800710e:	e04f      	b.n	80071b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fbbf 	bl	8006894 <sync_window>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <dir_next+0xf2>
 800711c:	2301      	movs	r3, #1
 800711e:	e047      	b.n	80071b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3330      	adds	r3, #48	@ 0x30
 8007124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fa25 	bl	800657a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff fc1d 	bl	8006976 <clust2sect>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007142:	e012      	b.n	800716a <dir_next+0x13c>
						fs->wflag = 1;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fba2 	bl	8006894 <sync_window>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <dir_next+0x12c>
 8007156:	2301      	movs	r3, #1
 8007158:	e02a      	b.n	80071b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	62da      	str	r2, [r3, #44]	@ 0x2c
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	895b      	ldrh	r3, [r3, #10]
 800716e:	461a      	mov	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4293      	cmp	r3, r2
 8007174:	d3e6      	bcc.n	8007144 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007188:	6979      	ldr	r1, [r7, #20]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7ff fbf3 	bl	8006976 <clust2sect>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	441a      	add	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80071c8:	2100      	movs	r1, #0
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff feb4 	bl	8006f38 <dir_sdi>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d12b      	bne.n	8007232 <dir_alloc+0x7a>
		n = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff fb99 	bl	800691c <move_window>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11d      	bne.n	8007230 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2be5      	cmp	r3, #229	@ 0xe5
 80071fc:	d004      	beq.n	8007208 <dir_alloc+0x50>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d107      	bne.n	8007218 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3301      	adds	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d102      	bne.n	800721c <dir_alloc+0x64>
 8007216:	e00c      	b.n	8007232 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff ff05 	bl	800702e <dir_next>
 8007224:	4603      	mov	r3, r0
 8007226:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0d7      	beq.n	80071de <dir_alloc+0x26>
 800722e:	e000      	b.n	8007232 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007230:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b04      	cmp	r3, #4
 8007236:	d101      	bne.n	800723c <dir_alloc+0x84>
 8007238:	2307      	movs	r3, #7
 800723a:	75fb      	strb	r3, [r7, #23]
	return res;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	331a      	adds	r3, #26
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff f8ed 	bl	8006434 <ld_word>
 800725a:	4603      	mov	r3, r0
 800725c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b03      	cmp	r3, #3
 8007264:	d109      	bne.n	800727a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff f8e2 	bl	8006434 <ld_word>
 8007270:	4603      	mov	r3, r0
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	331a      	adds	r3, #26
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	b292      	uxth	r2, r2
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f905 	bl	80064aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d109      	bne.n	80072bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f103 0214 	add.w	r2, r3, #20
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7ff f8f7 	bl	80064aa <st_word>
	}
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff fe2f 	bl	8006f38 <dir_sdi>
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <dir_find+0x24>
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	e03e      	b.n	8007366 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f7ff fb14 	bl	800691c <move_window>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d12f      	bne.n	800735e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <dir_find+0x4e>
 800730c:	2304      	movs	r3, #4
 800730e:	75fb      	strb	r3, [r7, #23]
 8007310:	e028      	b.n	8007364 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	330b      	adds	r3, #11
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	330b      	adds	r3, #11
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <dir_find+0x86>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a18      	ldr	r0, [r3, #32]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3324      	adds	r3, #36	@ 0x24
 800733c:	220b      	movs	r2, #11
 800733e:	4619      	mov	r1, r3
 8007340:	f7ff f936 	bl	80065b0 <mem_cmp>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fe6e 	bl	800702e <dir_next>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0c5      	beq.n	80072e8 <dir_find+0x24>
 800735c:	e002      	b.n	8007364 <dir_find+0xa0>
		if (res != FR_OK) break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007362:	bf00      	nop

	return res;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800737c:	2101      	movs	r1, #1
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff ff1a 	bl	80071b8 <dir_alloc>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d11c      	bne.n	80073c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	4619      	mov	r1, r3
 8007394:	68b8      	ldr	r0, [r7, #8]
 8007396:	f7ff fac1 	bl	800691c <move_window>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d111      	bne.n	80073c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	2220      	movs	r2, #32
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff f8e4 	bl	800657a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a18      	ldr	r0, [r3, #32]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3324      	adds	r3, #36	@ 0x24
 80073ba:	220b      	movs	r2, #11
 80073bc:	4619      	mov	r1, r3
 80073be:	f7ff f8bb 	bl	8006538 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2201      	movs	r2, #1
 80073c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3324      	adds	r3, #36	@ 0x24
 80073e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80073ea:	220b      	movs	r2, #11
 80073ec:	2120      	movs	r1, #32
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f7ff f8c3 	bl	800657a <mem_set>
	si = i = 0; ni = 8;
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	2308      	movs	r3, #8
 80073fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	61fa      	str	r2, [r7, #28]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800740e:	7efb      	ldrb	r3, [r7, #27]
 8007410:	2b20      	cmp	r3, #32
 8007412:	d94e      	bls.n	80074b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007414:	7efb      	ldrb	r3, [r7, #27]
 8007416:	2b2f      	cmp	r3, #47	@ 0x2f
 8007418:	d006      	beq.n	8007428 <create_name+0x54>
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	2b5c      	cmp	r3, #92	@ 0x5c
 800741e:	d110      	bne.n	8007442 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007420:	e002      	b.n	8007428 <create_name+0x54>
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	3301      	adds	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b2f      	cmp	r3, #47	@ 0x2f
 8007432:	d0f6      	beq.n	8007422 <create_name+0x4e>
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b5c      	cmp	r3, #92	@ 0x5c
 800743e:	d0f0      	beq.n	8007422 <create_name+0x4e>
			break;
 8007440:	e038      	b.n	80074b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007442:	7efb      	ldrb	r3, [r7, #27]
 8007444:	2b2e      	cmp	r3, #46	@ 0x2e
 8007446:	d003      	beq.n	8007450 <create_name+0x7c>
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	429a      	cmp	r2, r3
 800744e:	d30c      	bcc.n	800746a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b0b      	cmp	r3, #11
 8007454:	d002      	beq.n	800745c <create_name+0x88>
 8007456:	7efb      	ldrb	r3, [r7, #27]
 8007458:	2b2e      	cmp	r3, #46	@ 0x2e
 800745a:	d001      	beq.n	8007460 <create_name+0x8c>
 800745c:	2306      	movs	r3, #6
 800745e:	e044      	b.n	80074ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007460:	2308      	movs	r3, #8
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	230b      	movs	r3, #11
 8007466:	617b      	str	r3, [r7, #20]
			continue;
 8007468:	e022      	b.n	80074b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800746a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da04      	bge.n	800747c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007472:	7efb      	ldrb	r3, [r7, #27]
 8007474:	3b80      	subs	r3, #128	@ 0x80
 8007476:	4a1f      	ldr	r2, [pc, #124]	@ (80074f4 <create_name+0x120>)
 8007478:	5cd3      	ldrb	r3, [r2, r3]
 800747a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800747c:	7efb      	ldrb	r3, [r7, #27]
 800747e:	4619      	mov	r1, r3
 8007480:	481d      	ldr	r0, [pc, #116]	@ (80074f8 <create_name+0x124>)
 8007482:	f7ff f8bc 	bl	80065fe <chk_chr>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <create_name+0xbc>
 800748c:	2306      	movs	r3, #6
 800748e:	e02c      	b.n	80074ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007490:	7efb      	ldrb	r3, [r7, #27]
 8007492:	2b60      	cmp	r3, #96	@ 0x60
 8007494:	d905      	bls.n	80074a2 <create_name+0xce>
 8007496:	7efb      	ldrb	r3, [r7, #27]
 8007498:	2b7a      	cmp	r3, #122	@ 0x7a
 800749a:	d802      	bhi.n	80074a2 <create_name+0xce>
 800749c:	7efb      	ldrb	r3, [r7, #27]
 800749e:	3b20      	subs	r3, #32
 80074a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	613a      	str	r2, [r7, #16]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	7efa      	ldrb	r2, [r7, #27]
 80074ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80074b0:	e7a6      	b.n	8007400 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80074b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	441a      	add	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <create_name+0xf4>
 80074c4:	2306      	movs	r3, #6
 80074c6:	e010      	b.n	80074ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2be5      	cmp	r3, #229	@ 0xe5
 80074ce:	d102      	bne.n	80074d6 <create_name+0x102>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2205      	movs	r2, #5
 80074d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80074d6:	7efb      	ldrb	r3, [r7, #27]
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d801      	bhi.n	80074e0 <create_name+0x10c>
 80074dc:	2204      	movs	r2, #4
 80074de:	e000      	b.n	80074e2 <create_name+0x10e>
 80074e0:	2200      	movs	r2, #0
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	330b      	adds	r3, #11
 80074e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80074e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	080091b4 	.word	0x080091b4
 80074f8:	08009150 	.word	0x08009150

080074fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007510:	e002      	b.n	8007518 <follow_path+0x1c>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b2f      	cmp	r3, #47	@ 0x2f
 800751e:	d0f8      	beq.n	8007512 <follow_path+0x16>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b5c      	cmp	r3, #92	@ 0x5c
 8007526:	d0f4      	beq.n	8007512 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b1f      	cmp	r3, #31
 8007534:	d80a      	bhi.n	800754c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2280      	movs	r2, #128	@ 0x80
 800753a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800753e:	2100      	movs	r1, #0
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fcf9 	bl	8006f38 <dir_sdi>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
 800754a:	e043      	b.n	80075d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800754c:	463b      	mov	r3, r7
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff ff3f 	bl	80073d4 <create_name>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d134      	bne.n	80075ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff feaf 	bl	80072c4 <dir_find>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007570:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b04      	cmp	r3, #4
 800757c:	d127      	bne.n	80075ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d122      	bne.n	80075ce <follow_path+0xd2>
 8007588:	2305      	movs	r3, #5
 800758a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800758c:	e01f      	b.n	80075ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11c      	bne.n	80075d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	799b      	ldrb	r3, [r3, #6]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80075a4:	2305      	movs	r3, #5
 80075a6:	75fb      	strb	r3, [r7, #23]
 80075a8:	e014      	b.n	80075d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b8:	4413      	add	r3, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fe42 	bl	8007246 <ld_clust>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075c8:	e7c0      	b.n	800754c <follow_path+0x50>
			if (res != FR_OK) break;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <follow_path+0xd8>
				break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075d2:	bf00      	nop
			}
		}
	}

	return res;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d031      	beq.n	8007658 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e002      	b.n	8007602 <get_ldnumber+0x24>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b20      	cmp	r3, #32
 8007608:	d903      	bls.n	8007612 <get_ldnumber+0x34>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007610:	d1f4      	bne.n	80075fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b3a      	cmp	r3, #58	@ 0x3a
 8007618:	d11c      	bne.n	8007654 <get_ldnumber+0x76>
			tp = *path;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	60fa      	str	r2, [r7, #12]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	3b30      	subs	r3, #48	@ 0x30
 800762a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b09      	cmp	r3, #9
 8007630:	d80e      	bhi.n	8007650 <get_ldnumber+0x72>
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	429a      	cmp	r2, r3
 8007638:	d10a      	bne.n	8007650 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d107      	bne.n	8007650 <get_ldnumber+0x72>
					vol = (int)i;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	3301      	adds	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	e002      	b.n	800765a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007658:	693b      	ldr	r3, [r7, #16]
}
 800765a:	4618      	mov	r0, r3
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	70da      	strb	r2, [r3, #3]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800767e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff f94a 	bl	800691c <move_window>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <check_fs+0x2a>
 800768e:	2304      	movs	r3, #4
 8007690:	e038      	b.n	8007704 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3330      	adds	r3, #48	@ 0x30
 8007696:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe feca 	bl	8006434 <ld_word>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d001      	beq.n	80076b0 <check_fs+0x48>
 80076ac:	2303      	movs	r3, #3
 80076ae:	e029      	b.n	8007704 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076b6:	2be9      	cmp	r3, #233	@ 0xe9
 80076b8:	d009      	beq.n	80076ce <check_fs+0x66>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076c0:	2beb      	cmp	r3, #235	@ 0xeb
 80076c2:	d11e      	bne.n	8007702 <check_fs+0x9a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80076ca:	2b90      	cmp	r3, #144	@ 0x90
 80076cc:	d119      	bne.n	8007702 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3330      	adds	r3, #48	@ 0x30
 80076d2:	3336      	adds	r3, #54	@ 0x36
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fec5 	bl	8006464 <ld_dword>
 80076da:	4603      	mov	r3, r0
 80076dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076e0:	4a0a      	ldr	r2, [pc, #40]	@ (800770c <check_fs+0xa4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d101      	bne.n	80076ea <check_fs+0x82>
 80076e6:	2300      	movs	r3, #0
 80076e8:	e00c      	b.n	8007704 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3330      	adds	r3, #48	@ 0x30
 80076ee:	3352      	adds	r3, #82	@ 0x52
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe feb7 	bl	8006464 <ld_dword>
 80076f6:	4603      	mov	r3, r0
 80076f8:	4a05      	ldr	r2, [pc, #20]	@ (8007710 <check_fs+0xa8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d101      	bne.n	8007702 <check_fs+0x9a>
 80076fe:	2300      	movs	r3, #0
 8007700:	e000      	b.n	8007704 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007702:	2302      	movs	r3, #2
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	00544146 	.word	0x00544146
 8007710:	33544146 	.word	0x33544146

08007714 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b096      	sub	sp, #88	@ 0x58
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff ff58 	bl	80075de <get_ldnumber>
 800772e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007732:	2b00      	cmp	r3, #0
 8007734:	da01      	bge.n	800773a <find_volume+0x26>
 8007736:	230b      	movs	r3, #11
 8007738:	e22d      	b.n	8007b96 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800773a:	4aa1      	ldr	r2, [pc, #644]	@ (80079c0 <find_volume+0x2ac>)
 800773c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007742:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <find_volume+0x3a>
 800774a:	230c      	movs	r3, #12
 800774c:	e223      	b.n	8007b96 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007752:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01a      	beq.n	800779a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fde1 	bl	8006330 <disk_status>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007774:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <find_volume+0x82>
 8007786:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007792:	230a      	movs	r3, #10
 8007794:	e1ff      	b.n	8007b96 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007796:	2300      	movs	r3, #0
 8007798:	e1fd      	b.n	8007b96 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80077a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fdd9 	bl	8006364 <disk_initialize>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80077b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80077c4:	2303      	movs	r3, #3
 80077c6:	e1e6      	b.n	8007b96 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <find_volume+0xca>
 80077ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80077da:	230a      	movs	r3, #10
 80077dc:	e1db      	b.n	8007b96 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80077e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077e6:	f7ff ff3f 	bl	8007668 <check_fs>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d149      	bne.n	800788c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077f8:	2300      	movs	r3, #0
 80077fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80077fc:	e01e      	b.n	800783c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800780c:	4413      	add	r3, r2
 800780e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	3304      	adds	r3, #4
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d006      	beq.n	8007828 <find_volume+0x114>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	3308      	adds	r3, #8
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fe20 	bl	8006464 <ld_dword>
 8007824:	4602      	mov	r2, r0
 8007826:	e000      	b.n	800782a <find_volume+0x116>
 8007828:	2200      	movs	r2, #0
 800782a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	3358      	adds	r3, #88	@ 0x58
 8007830:	443b      	add	r3, r7
 8007832:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007838:	3301      	adds	r3, #1
 800783a:	643b      	str	r3, [r7, #64]	@ 0x40
 800783c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783e:	2b03      	cmp	r3, #3
 8007840:	d9dd      	bls.n	80077fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007842:	2300      	movs	r3, #0
 8007844:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <find_volume+0x13e>
 800784c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800784e:	3b01      	subs	r3, #1
 8007850:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	3358      	adds	r3, #88	@ 0x58
 8007858:	443b      	add	r3, r7
 800785a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800785e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <find_volume+0x15e>
 8007866:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007868:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800786a:	f7ff fefd 	bl	8007668 <check_fs>
 800786e:	4603      	mov	r3, r0
 8007870:	e000      	b.n	8007874 <find_volume+0x160>
 8007872:	2303      	movs	r3, #3
 8007874:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800787c:	2b01      	cmp	r3, #1
 800787e:	d905      	bls.n	800788c <find_volume+0x178>
 8007880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007882:	3301      	adds	r3, #1
 8007884:	643b      	str	r3, [r7, #64]	@ 0x40
 8007886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007888:	2b03      	cmp	r3, #3
 800788a:	d9e2      	bls.n	8007852 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800788c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007890:	2b04      	cmp	r3, #4
 8007892:	d101      	bne.n	8007898 <find_volume+0x184>
 8007894:	2301      	movs	r3, #1
 8007896:	e17e      	b.n	8007b96 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007898:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800789c:	2b01      	cmp	r3, #1
 800789e:	d901      	bls.n	80078a4 <find_volume+0x190>
 80078a0:	230d      	movs	r3, #13
 80078a2:	e178      	b.n	8007b96 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a6:	3330      	adds	r3, #48	@ 0x30
 80078a8:	330b      	adds	r3, #11
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fdc2 	bl	8006434 <ld_word>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b6:	d001      	beq.n	80078bc <find_volume+0x1a8>
 80078b8:	230d      	movs	r3, #13
 80078ba:	e16c      	b.n	8007b96 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	3330      	adds	r3, #48	@ 0x30
 80078c0:	3316      	adds	r3, #22
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fdb6 	bl	8006434 <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80078cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <find_volume+0x1cc>
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d4:	3330      	adds	r3, #48	@ 0x30
 80078d6:	3324      	adds	r3, #36	@ 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fdc3 	bl	8006464 <ld_dword>
 80078de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d005      	beq.n	8007904 <find_volume+0x1f0>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	789b      	ldrb	r3, [r3, #2]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d001      	beq.n	8007904 <find_volume+0x1f0>
 8007900:	230d      	movs	r3, #13
 8007902:	e148      	b.n	8007b96 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	789b      	ldrb	r3, [r3, #2]
 8007908:	461a      	mov	r2, r3
 800790a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007918:	461a      	mov	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <find_volume+0x224>
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	895b      	ldrh	r3, [r3, #10]
 800792a:	461a      	mov	r2, r3
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	895b      	ldrh	r3, [r3, #10]
 8007930:	3b01      	subs	r3, #1
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <find_volume+0x228>
 8007938:	230d      	movs	r3, #13
 800793a:	e12c      	b.n	8007b96 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	3330      	adds	r3, #48	@ 0x30
 8007940:	3311      	adds	r3, #17
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fd76 	bl	8006434 <ld_word>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <find_volume+0x24e>
 800795e:	230d      	movs	r3, #13
 8007960:	e119      	b.n	8007b96 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	3330      	adds	r3, #48	@ 0x30
 8007966:	3313      	adds	r3, #19
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fd63 	bl	8006434 <ld_word>
 800796e:	4603      	mov	r3, r0
 8007970:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007974:	2b00      	cmp	r3, #0
 8007976:	d106      	bne.n	8007986 <find_volume+0x272>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	3330      	adds	r3, #48	@ 0x30
 800797c:	3320      	adds	r3, #32
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fd70 	bl	8006464 <ld_dword>
 8007984:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	3330      	adds	r3, #48	@ 0x30
 800798a:	330e      	adds	r3, #14
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fd51 	bl	8006434 <ld_word>
 8007992:	4603      	mov	r3, r0
 8007994:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007996:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <find_volume+0x28c>
 800799c:	230d      	movs	r3, #13
 800799e:	e0fa      	b.n	8007b96 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80079a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a4:	4413      	add	r3, r2
 80079a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079a8:	8912      	ldrh	r2, [r2, #8]
 80079aa:	0912      	lsrs	r2, r2, #4
 80079ac:	b292      	uxth	r2, r2
 80079ae:	4413      	add	r3, r2
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80079b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d204      	bcs.n	80079c4 <find_volume+0x2b0>
 80079ba:	230d      	movs	r3, #13
 80079bc:	e0eb      	b.n	8007b96 <find_volume+0x482>
 80079be:	bf00      	nop
 80079c0:	200045c4 	.word	0x200045c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80079c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079cc:	8952      	ldrh	r2, [r2, #10]
 80079ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <find_volume+0x2ca>
 80079da:	230d      	movs	r3, #13
 80079dc:	e0db      	b.n	8007b96 <find_volume+0x482>
		fmt = FS_FAT32;
 80079de:	2303      	movs	r3, #3
 80079e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d802      	bhi.n	80079f4 <find_volume+0x2e0>
 80079ee:	2302      	movs	r3, #2
 80079f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d802      	bhi.n	8007a04 <find_volume+0x2f0>
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	1c9a      	adds	r2, r3, #2
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a16:	441a      	add	r2, r3
 8007a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007a1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	441a      	add	r2, r3
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007a26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d11e      	bne.n	8007a6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a30:	3330      	adds	r3, #48	@ 0x30
 8007a32:	332a      	adds	r3, #42	@ 0x2a
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fcfd 	bl	8006434 <ld_word>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <find_volume+0x330>
 8007a40:	230d      	movs	r3, #13
 8007a42:	e0a8      	b.n	8007b96 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	891b      	ldrh	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <find_volume+0x33c>
 8007a4c:	230d      	movs	r3, #13
 8007a4e:	e0a2      	b.n	8007b96 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	3330      	adds	r3, #48	@ 0x30
 8007a54:	332c      	adds	r3, #44	@ 0x2c
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fd04 	bl	8006464 <ld_dword>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6a:	e01f      	b.n	8007aac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6e:	891b      	ldrh	r3, [r3, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <find_volume+0x364>
 8007a74:	230d      	movs	r3, #13
 8007a76:	e08e      	b.n	8007b96 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7e:	441a      	add	r2, r3
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d103      	bne.n	8007a94 <find_volume+0x380>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	e00a      	b.n	8007aaa <find_volume+0x396>
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	085a      	lsrs	r2, r3, #1
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007aaa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007ab6:	0a5b      	lsrs	r3, r3, #9
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d201      	bcs.n	8007ac0 <find_volume+0x3ac>
 8007abc:	230d      	movs	r3, #13
 8007abe:	e06a      	b.n	8007b96 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac6:	611a      	str	r2, [r3, #16]
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	2280      	movs	r2, #128	@ 0x80
 8007ad4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d149      	bne.n	8007b72 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	3330      	adds	r3, #48	@ 0x30
 8007ae2:	3330      	adds	r3, #48	@ 0x30
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fca5 	bl	8006434 <ld_word>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d140      	bne.n	8007b72 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af2:	3301      	adds	r3, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007af8:	f7fe ff10 	bl	800691c <move_window>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d137      	bne.n	8007b72 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	2200      	movs	r2, #0
 8007b06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	3330      	adds	r3, #48	@ 0x30
 8007b0c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fc8f 	bl	8006434 <ld_word>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d127      	bne.n	8007b72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	3330      	adds	r3, #48	@ 0x30
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fc9c 	bl	8006464 <ld_dword>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba0 <find_volume+0x48c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d11e      	bne.n	8007b72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	3330      	adds	r3, #48	@ 0x30
 8007b38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fc91 	bl	8006464 <ld_dword>
 8007b42:	4603      	mov	r3, r0
 8007b44:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <find_volume+0x490>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d113      	bne.n	8007b72 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	3330      	adds	r3, #48	@ 0x30
 8007b4e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fc86 	bl	8006464 <ld_dword>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	3330      	adds	r3, #48	@ 0x30
 8007b62:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fc7c 	bl	8006464 <ld_dword>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b70:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007b78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba8 <find_volume+0x494>)
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <find_volume+0x494>)
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <find_volume+0x494>)
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b90:	f7fe fe5c 	bl	800684c <clear_lock>
#endif
	return FR_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3758      	adds	r7, #88	@ 0x58
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	41615252 	.word	0x41615252
 8007ba4:	61417272 	.word	0x61417272
 8007ba8:	200045c8 	.word	0x200045c8

08007bac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007bb6:	2309      	movs	r3, #9
 8007bb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01c      	beq.n	8007bfa <validate+0x4e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d018      	beq.n	8007bfa <validate+0x4e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <validate+0x4e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	889a      	ldrh	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d10c      	bne.n	8007bfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fba2 	bl	8006330 <disk_status>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <validate+0x4e>
			res = FR_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <validate+0x5a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	e000      	b.n	8007c08 <validate+0x5c>
 8007c06:	2300      	movs	r3, #0
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	6013      	str	r3, [r2, #0]
	return res;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c2a:	f107 0310 	add.w	r3, r7, #16
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fcd5 	bl	80075de <get_ldnumber>
 8007c34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	da01      	bge.n	8007c40 <f_mount+0x28>
 8007c3c:	230b      	movs	r3, #11
 8007c3e:	e02b      	b.n	8007c98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c40:	4a17      	ldr	r2, [pc, #92]	@ (8007ca0 <f_mount+0x88>)
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c50:	69b8      	ldr	r0, [r7, #24]
 8007c52:	f7fe fdfb 	bl	800684c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	490d      	ldr	r1, [pc, #52]	@ (8007ca0 <f_mount+0x88>)
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <f_mount+0x66>
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d001      	beq.n	8007c82 <f_mount+0x6a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e00a      	b.n	8007c98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c82:	f107 010c 	add.w	r1, r7, #12
 8007c86:	f107 0308 	add.w	r3, r7, #8
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fd41 	bl	8007714 <find_volume>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200045c4 	.word	0x200045c4

08007ca4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b098      	sub	sp, #96	@ 0x60
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <f_open+0x18>
 8007cb8:	2309      	movs	r3, #9
 8007cba:	e1a9      	b.n	8008010 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cc4:	79fa      	ldrb	r2, [r7, #7]
 8007cc6:	f107 0110 	add.w	r1, r7, #16
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff fd20 	bl	8007714 <find_volume>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007cda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 818d 	bne.w	8007ffe <f_open+0x35a>
		dj.obj.fs = fs;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	f107 0314 	add.w	r3, r7, #20
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff fc03 	bl	80074fc <follow_path>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d118      	bne.n	8007d36 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007d04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d08:	b25b      	sxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da03      	bge.n	8007d16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007d0e:	2306      	movs	r3, #6
 8007d10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d14:	e00f      	b.n	8007d36 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	bf8c      	ite	hi
 8007d1c:	2301      	movhi	r3, #1
 8007d1e:	2300      	movls	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	f107 0314 	add.w	r3, r7, #20
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fc82 	bl	8006634 <chk_lock>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	f003 031c 	and.w	r3, r3, #28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d07f      	beq.n	8007e40 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007d40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d10e      	bne.n	8007d6e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d50:	f7fe fccc 	bl	80066ec <enq_lock>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d006      	beq.n	8007d68 <f_open+0xc4>
 8007d5a:	f107 0314 	add.w	r3, r7, #20
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fb05 	bl	800736e <dir_register>
 8007d64:	4603      	mov	r3, r0
 8007d66:	e000      	b.n	8007d6a <f_open+0xc6>
 8007d68:	2312      	movs	r3, #18
 8007d6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	f043 0308 	orr.w	r3, r3, #8
 8007d74:	71fb      	strb	r3, [r7, #7]
 8007d76:	e010      	b.n	8007d9a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d78:	7ebb      	ldrb	r3, [r7, #26]
 8007d7a:	f003 0311 	and.w	r3, r3, #17
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <f_open+0xe6>
					res = FR_DENIED;
 8007d82:	2307      	movs	r3, #7
 8007d84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d88:	e007      	b.n	8007d9a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <f_open+0xf6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d168      	bne.n	8007e74 <f_open+0x1d0>
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d063      	beq.n	8007e74 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007dac:	f7fe fa5c 	bl	8006268 <get_fattime>
 8007db0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db4:	330e      	adds	r3, #14
 8007db6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fb91 	bl	80064e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc0:	3316      	adds	r3, #22
 8007dc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fb8b 	bl	80064e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dcc:	330b      	adds	r3, #11
 8007dce:	2220      	movs	r2, #32
 8007dd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff fa34 	bl	8007246 <ld_clust>
 8007dde:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007de4:	2200      	movs	r2, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff fa4c 	bl	8007284 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dee:	331c      	adds	r3, #28
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fb74 	bl	80064e0 <st_dword>
					fs->wflag = 1;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d037      	beq.n	8007e74 <f_open+0x1d0>
						dw = fs->winsect;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007e0a:	f107 0314 	add.w	r3, r7, #20
 8007e0e:	2200      	movs	r2, #0
 8007e10:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe ff5f 	bl	8006cd6 <remove_chain>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d126      	bne.n	8007e74 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fd76 	bl	800691c <move_window>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	e019      	b.n	8007e74 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d115      	bne.n	8007e74 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e48:	7ebb      	ldrb	r3, [r7, #26]
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007e52:	2304      	movs	r3, #4
 8007e54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e58:	e00c      	b.n	8007e74 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <f_open+0x1d0>
 8007e64:	7ebb      	ldrb	r3, [r7, #26]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <f_open+0x1d0>
						res = FR_DENIED;
 8007e6e:	2307      	movs	r3, #7
 8007e70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d126      	bne.n	8007eca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007e96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	bf8c      	ite	hi
 8007ea2:	2301      	movhi	r3, #1
 8007ea4:	2300      	movls	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f107 0314 	add.w	r3, r7, #20
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fc3d 	bl	8006730 <inc_lock>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <f_open+0x226>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007eca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 8095 	bne.w	8007ffe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff f9b3 	bl	8007246 <ld_clust>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee8:	331c      	adds	r3, #28
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe faba 	bl	8006464 <ld_dword>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	88da      	ldrh	r2, [r3, #6]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	79fa      	ldrb	r2, [r7, #7]
 8007f0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3330      	adds	r3, #48	@ 0x30
 8007f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fb24 	bl	800657a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d060      	beq.n	8007ffe <f_open+0x35a>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d05c      	beq.n	8007ffe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	895b      	ldrh	r3, [r3, #10]
 8007f50:	025b      	lsls	r3, r3, #9
 8007f52:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f60:	e016      	b.n	8007f90 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fd24 	bl	80069b4 <get_fat>
 8007f6c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d802      	bhi.n	8007f7a <f_open+0x2d6>
 8007f74:	2302      	movs	r3, #2
 8007f76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f80:	d102      	bne.n	8007f88 <f_open+0x2e4>
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <f_open+0x2fc>
 8007f98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d8e0      	bhi.n	8007f62 <f_open+0x2be>
				}
				fp->clust = clst;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fa4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d127      	bne.n	8007ffe <f_open+0x35a>
 8007fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d022      	beq.n	8007ffe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fcda 	bl	8006976 <clust2sect>
 8007fc2:	6478      	str	r0, [r7, #68]	@ 0x44
 8007fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <f_open+0x32e>
						res = FR_INT_ERR;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007fd0:	e015      	b.n	8007ffe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd4:	0a5a      	lsrs	r2, r3, #9
 8007fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd8:	441a      	add	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	7858      	ldrb	r0, [r3, #1]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a1a      	ldr	r2, [r3, #32]
 8007fec:	2301      	movs	r3, #1
 8007fee:	f7fe f9e1 	bl	80063b4 <disk_read>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <f_open+0x35a>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <f_open+0x368>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800800c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008010:	4618      	mov	r0, r3
 8008012:	3760      	adds	r7, #96	@ 0x60
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08e      	sub	sp, #56	@ 0x38
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f107 0214 	add.w	r2, r7, #20
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fdb7 	bl	8007bac <validate>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008048:	2b00      	cmp	r3, #0
 800804a:	d107      	bne.n	800805c <f_read+0x44>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	7d5b      	ldrb	r3, [r3, #21]
 8008050:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008054:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <f_read+0x4a>
 800805c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008060:	e115      	b.n	800828e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	7d1b      	ldrb	r3, [r3, #20]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <f_read+0x5a>
 800806e:	2307      	movs	r3, #7
 8008070:	e10d      	b.n	800828e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	429a      	cmp	r2, r3
 8008084:	f240 80fe 	bls.w	8008284 <f_read+0x26c>
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800808c:	e0fa      	b.n	8008284 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 80c6 	bne.w	8008228 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	0a5b      	lsrs	r3, r3, #9
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	8952      	ldrh	r2, [r2, #10]
 80080a6:	3a01      	subs	r2, #1
 80080a8:	4013      	ands	r3, r2
 80080aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d12f      	bne.n	8008112 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c0:	e013      	b.n	80080ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7fe fefd 	bl	8006ed0 <clmt_clust>
 80080d6:	6338      	str	r0, [r7, #48]	@ 0x30
 80080d8:	e007      	b.n	80080ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fe fc66 	bl	80069b4 <get_fat>
 80080e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d804      	bhi.n	80080fa <f_read+0xe2>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2202      	movs	r2, #2
 80080f4:	755a      	strb	r2, [r3, #21]
 80080f6:	2302      	movs	r3, #2
 80080f8:	e0c9      	b.n	800828e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008100:	d104      	bne.n	800810c <f_read+0xf4>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	755a      	strb	r2, [r3, #21]
 8008108:	2301      	movs	r3, #1
 800810a:	e0c0      	b.n	800828e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008110:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fc2b 	bl	8006976 <clust2sect>
 8008120:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <f_read+0x11a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2202      	movs	r2, #2
 800812c:	755a      	strb	r2, [r3, #21]
 800812e:	2302      	movs	r3, #2
 8008130:	e0ad      	b.n	800828e <f_read+0x276>
			sect += csect;
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	0a5b      	lsrs	r3, r3, #9
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	2b00      	cmp	r3, #0
 8008144:	d039      	beq.n	80081ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008146:	69fa      	ldr	r2, [r7, #28]
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	4413      	add	r3, r2
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	8952      	ldrh	r2, [r2, #10]
 8008150:	4293      	cmp	r3, r2
 8008152:	d905      	bls.n	8008160 <f_read+0x148>
					cc = fs->csize - csect;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	895b      	ldrh	r3, [r3, #10]
 8008158:	461a      	mov	r2, r3
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	7858      	ldrb	r0, [r3, #1]
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800816a:	f7fe f923 	bl	80063b4 <disk_read>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <f_read+0x166>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	755a      	strb	r2, [r3, #21]
 800817a:	2301      	movs	r3, #1
 800817c:	e087      	b.n	800828e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	7d1b      	ldrb	r3, [r3, #20]
 8008182:	b25b      	sxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	da14      	bge.n	80081b2 <f_read+0x19a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008192:	429a      	cmp	r2, r3
 8008194:	d90d      	bls.n	80081b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1a      	ldr	r2, [r3, #32]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	025b      	lsls	r3, r3, #9
 80081a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a2:	18d0      	adds	r0, r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3330      	adds	r3, #48	@ 0x30
 80081a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe f9c3 	bl	8006538 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80081b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b4:	025b      	lsls	r3, r3, #9
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80081b8:	e050      	b.n	800825c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d02e      	beq.n	8008222 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	7d1b      	ldrb	r3, [r3, #20]
 80081c8:	b25b      	sxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da18      	bge.n	8008200 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	7858      	ldrb	r0, [r3, #1]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	2301      	movs	r3, #1
 80081de:	f7fe f909 	bl	80063f4 <disk_write>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <f_read+0x1da>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	755a      	strb	r2, [r3, #21]
 80081ee:	2301      	movs	r3, #1
 80081f0:	e04d      	b.n	800828e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	7d1b      	ldrb	r3, [r3, #20]
 80081f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	7858      	ldrb	r0, [r3, #1]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800820a:	2301      	movs	r3, #1
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	f7fe f8d1 	bl	80063b4 <disk_read>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <f_read+0x20a>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	755a      	strb	r2, [r3, #21]
 800821e:	2301      	movs	r3, #1
 8008220:	e035      	b.n	800828e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008230:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d901      	bls.n	8008242 <f_read+0x22a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	4413      	add	r3, r2
 8008252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008254:	4619      	mov	r1, r3
 8008256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008258:	f7fe f96e 	bl	8006538 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800825c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008260:	4413      	add	r3, r2
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699a      	ldr	r2, [r3, #24]
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	441a      	add	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	619a      	str	r2, [r3, #24]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	441a      	add	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f47f af01 	bne.w	800808e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3738      	adds	r7, #56	@ 0x38
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b090      	sub	sp, #64	@ 0x40
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fc7f 	bl	8007bac <validate>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80082b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <f_lseek+0x2e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7d5b      	ldrb	r3, [r3, #21]
 80082c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80082c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <f_lseek+0x3c>
 80082cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082d0:	e1e6      	b.n	80086a0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80d1 	beq.w	800847e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082e2:	d15a      	bne.n	800839a <f_lseek+0x104>
			tbl = fp->cltbl;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	1d1a      	adds	r2, r3, #4
 80082ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	2302      	movs	r3, #2
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	2b00      	cmp	r3, #0
 8008302:	d03a      	beq.n	800837a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	613b      	str	r3, [r7, #16]
 8008308:	2300      	movs	r3, #0
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830e:	3302      	adds	r3, #2
 8008310:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	3301      	adds	r3, #1
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fb47 	bl	80069b4 <get_fat>
 8008326:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	2b01      	cmp	r3, #1
 800832c:	d804      	bhi.n	8008338 <f_lseek+0xa2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	755a      	strb	r2, [r3, #21]
 8008334:	2302      	movs	r3, #2
 8008336:	e1b3      	b.n	80086a0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833e:	d104      	bne.n	800834a <f_lseek+0xb4>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	755a      	strb	r2, [r3, #21]
 8008346:	2301      	movs	r3, #1
 8008348:	e1aa      	b.n	80086a0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008350:	429a      	cmp	r2, r3
 8008352:	d0de      	beq.n	8008312 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	429a      	cmp	r2, r3
 800835a:	d809      	bhi.n	8008370 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	627a      	str	r2, [r7, #36]	@ 0x24
 8008362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	627a      	str	r2, [r7, #36]	@ 0x24
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008376:	429a      	cmp	r2, r3
 8008378:	d3c4      	bcc.n	8008304 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008380:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	429a      	cmp	r2, r3
 8008388:	d803      	bhi.n	8008392 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	e184      	b.n	800869c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008392:	2311      	movs	r3, #17
 8008394:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008398:	e180      	b.n	800869c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d902      	bls.n	80083aa <f_lseek+0x114>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8172 	beq.w	800869c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fe fd86 	bl	8006ed0 <clmt_clust>
 80083c4:	4602      	mov	r2, r0
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe facf 	bl	8006976 <clust2sect>
 80083d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <f_lseek+0x154>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	755a      	strb	r2, [r3, #21]
 80083e6:	2302      	movs	r3, #2
 80083e8:	e15a      	b.n	80086a0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	0a5b      	lsrs	r3, r3, #9
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	8952      	ldrh	r2, [r2, #10]
 80083f4:	3a01      	subs	r2, #1
 80083f6:	4013      	ands	r3, r2
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4413      	add	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8148 	beq.w	800869c <f_lseek+0x406>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	429a      	cmp	r2, r3
 8008414:	f000 8142 	beq.w	800869c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7d1b      	ldrb	r3, [r3, #20]
 800841c:	b25b      	sxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	da18      	bge.n	8008454 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	7858      	ldrb	r0, [r3, #1]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1a      	ldr	r2, [r3, #32]
 8008430:	2301      	movs	r3, #1
 8008432:	f7fd ffdf 	bl	80063f4 <disk_write>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <f_lseek+0x1b0>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	755a      	strb	r2, [r3, #21]
 8008442:	2301      	movs	r3, #1
 8008444:	e12c      	b.n	80086a0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7d1b      	ldrb	r3, [r3, #20]
 800844a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844e:	b2da      	uxtb	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	7858      	ldrb	r0, [r3, #1]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800845e:	2301      	movs	r3, #1
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	f7fd ffa7 	bl	80063b4 <disk_read>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <f_lseek+0x1e0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	755a      	strb	r2, [r3, #21]
 8008472:	2301      	movs	r3, #1
 8008474:	e114      	b.n	80086a0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	621a      	str	r2, [r3, #32]
 800847c:	e10e      	b.n	800869c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d908      	bls.n	800849a <f_lseek+0x204>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7d1b      	ldrb	r3, [r3, #20]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084a8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80a7 	beq.w	8008600 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	895b      	ldrh	r3, [r3, #10]
 80084b6:	025b      	lsls	r3, r3, #9
 80084b8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01b      	beq.n	80084f8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	1e5a      	subs	r2, r3, #1
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	1e59      	subs	r1, r3, #1
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d30f      	bcc.n	80084f8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	1e5a      	subs	r2, r3, #1
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	425b      	negs	r3, r3
 80084e0:	401a      	ands	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084f6:	e022      	b.n	800853e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80084fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008500:	2b00      	cmp	r3, #0
 8008502:	d119      	bne.n	8008538 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe fc49 	bl	8006da0 <create_chain>
 800850e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008512:	2b01      	cmp	r3, #1
 8008514:	d104      	bne.n	8008520 <f_lseek+0x28a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	755a      	strb	r2, [r3, #21]
 800851c:	2302      	movs	r3, #2
 800851e:	e0bf      	b.n	80086a0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008526:	d104      	bne.n	8008532 <f_lseek+0x29c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	755a      	strb	r2, [r3, #21]
 800852e:	2301      	movs	r3, #1
 8008530:	e0b6      	b.n	80086a0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008536:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800853c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800853e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05d      	beq.n	8008600 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008544:	e03a      	b.n	80085bc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	441a      	add	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7d1b      	ldrb	r3, [r3, #20]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fc18 	bl	8006da0 <create_chain>
 8008570:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d108      	bne.n	800858a <f_lseek+0x2f4>
							ofs = 0; break;
 8008578:	2300      	movs	r3, #0
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	e022      	b.n	80085c4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fa16 	bl	80069b4 <get_fat>
 8008588:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800858a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008590:	d104      	bne.n	800859c <f_lseek+0x306>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	755a      	strb	r2, [r3, #21]
 8008598:	2301      	movs	r3, #1
 800859a:	e081      	b.n	80086a0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d904      	bls.n	80085ac <f_lseek+0x316>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d304      	bcc.n	80085b6 <f_lseek+0x320>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	755a      	strb	r2, [r3, #21]
 80085b2:	2302      	movs	r3, #2
 80085b4:	e074      	b.n	80086a0 <f_lseek+0x40a>
					fp->clust = clst;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085ba:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d8c0      	bhi.n	8008546 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	441a      	add	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d012      	beq.n	8008600 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe f9c9 	bl	8006976 <clust2sect>
 80085e4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80085e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <f_lseek+0x360>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	755a      	strb	r2, [r3, #21]
 80085f2:	2302      	movs	r3, #2
 80085f4:	e054      	b.n	80086a0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	0a5b      	lsrs	r3, r3, #9
 80085fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085fc:	4413      	add	r3, r2
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	429a      	cmp	r2, r3
 800860a:	d90a      	bls.n	8008622 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7d1b      	ldrb	r3, [r3, #20]
 8008618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861c:	b2da      	uxtb	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	2b00      	cmp	r3, #0
 800862c:	d036      	beq.n	800869c <f_lseek+0x406>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008634:	429a      	cmp	r2, r3
 8008636:	d031      	beq.n	800869c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7d1b      	ldrb	r3, [r3, #20]
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da18      	bge.n	8008674 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	7858      	ldrb	r0, [r3, #1]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	2301      	movs	r3, #1
 8008652:	f7fd fecf 	bl	80063f4 <disk_write>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <f_lseek+0x3d0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	755a      	strb	r2, [r3, #21]
 8008662:	2301      	movs	r3, #1
 8008664:	e01c      	b.n	80086a0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7d1b      	ldrb	r3, [r3, #20]
 800866a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800866e:	b2da      	uxtb	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	7858      	ldrb	r0, [r3, #1]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800867e:	2301      	movs	r3, #1
 8008680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008682:	f7fd fe97 	bl	80063b4 <disk_read>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <f_lseek+0x400>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	755a      	strb	r2, [r3, #21]
 8008692:	2301      	movs	r3, #1
 8008694:	e004      	b.n	80086a0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800869a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800869c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3740      	adds	r7, #64	@ 0x40
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086be:	4b1f      	ldr	r3, [pc, #124]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086c0:	7a5b      	ldrb	r3, [r3, #9]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d131      	bne.n	800872c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086c8:	4b1c      	ldr	r3, [pc, #112]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086ca:	7a5b      	ldrb	r3, [r3, #9]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b1a      	ldr	r3, [pc, #104]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086d2:	2100      	movs	r1, #0
 80086d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086d6:	4b19      	ldr	r3, [pc, #100]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086d8:	7a5b      	ldrb	r3, [r3, #9]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4a17      	ldr	r2, [pc, #92]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086e6:	4b15      	ldr	r3, [pc, #84]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086e8:	7a5b      	ldrb	r3, [r3, #9]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	4b13      	ldr	r3, [pc, #76]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086f0:	4413      	add	r3, r2
 80086f2:	79fa      	ldrb	r2, [r7, #7]
 80086f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 80086f8:	7a5b      	ldrb	r3, [r3, #9]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	b2d1      	uxtb	r1, r2
 8008700:	4a0e      	ldr	r2, [pc, #56]	@ (800873c <FATFS_LinkDriverEx+0x94>)
 8008702:	7251      	strb	r1, [r2, #9]
 8008704:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	3330      	adds	r3, #48	@ 0x30
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3301      	adds	r3, #1
 8008714:	223a      	movs	r2, #58	@ 0x3a
 8008716:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3302      	adds	r3, #2
 800871c:	222f      	movs	r2, #47	@ 0x2f
 800871e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3303      	adds	r3, #3
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	200045ec 	.word	0x200045ec

08008740 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800874a:	2200      	movs	r2, #0
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffaa 	bl	80086a8 <FATFS_LinkDriverEx>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <__sflush_r>:
 8008760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008768:	0716      	lsls	r6, r2, #28
 800876a:	4605      	mov	r5, r0
 800876c:	460c      	mov	r4, r1
 800876e:	d454      	bmi.n	800881a <__sflush_r+0xba>
 8008770:	684b      	ldr	r3, [r1, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dc02      	bgt.n	800877c <__sflush_r+0x1c>
 8008776:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	dd48      	ble.n	800880e <__sflush_r+0xae>
 800877c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800877e:	2e00      	cmp	r6, #0
 8008780:	d045      	beq.n	800880e <__sflush_r+0xae>
 8008782:	2300      	movs	r3, #0
 8008784:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008788:	682f      	ldr	r7, [r5, #0]
 800878a:	6a21      	ldr	r1, [r4, #32]
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	d030      	beq.n	80087f2 <__sflush_r+0x92>
 8008790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	0759      	lsls	r1, r3, #29
 8008796:	d505      	bpl.n	80087a4 <__sflush_r+0x44>
 8008798:	6863      	ldr	r3, [r4, #4]
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800879e:	b10b      	cbz	r3, 80087a4 <__sflush_r+0x44>
 80087a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	2300      	movs	r3, #0
 80087a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087a8:	6a21      	ldr	r1, [r4, #32]
 80087aa:	4628      	mov	r0, r5
 80087ac:	47b0      	blx	r6
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	d106      	bne.n	80087c2 <__sflush_r+0x62>
 80087b4:	6829      	ldr	r1, [r5, #0]
 80087b6:	291d      	cmp	r1, #29
 80087b8:	d82b      	bhi.n	8008812 <__sflush_r+0xb2>
 80087ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008864 <__sflush_r+0x104>)
 80087bc:	410a      	asrs	r2, r1
 80087be:	07d6      	lsls	r6, r2, #31
 80087c0:	d427      	bmi.n	8008812 <__sflush_r+0xb2>
 80087c2:	2200      	movs	r2, #0
 80087c4:	6062      	str	r2, [r4, #4]
 80087c6:	04d9      	lsls	r1, r3, #19
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	6022      	str	r2, [r4, #0]
 80087cc:	d504      	bpl.n	80087d8 <__sflush_r+0x78>
 80087ce:	1c42      	adds	r2, r0, #1
 80087d0:	d101      	bne.n	80087d6 <__sflush_r+0x76>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	b903      	cbnz	r3, 80087d8 <__sflush_r+0x78>
 80087d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80087d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087da:	602f      	str	r7, [r5, #0]
 80087dc:	b1b9      	cbz	r1, 800880e <__sflush_r+0xae>
 80087de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087e2:	4299      	cmp	r1, r3
 80087e4:	d002      	beq.n	80087ec <__sflush_r+0x8c>
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 faee 	bl	8008dc8 <_free_r>
 80087ec:	2300      	movs	r3, #0
 80087ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80087f0:	e00d      	b.n	800880e <__sflush_r+0xae>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b0      	blx	r6
 80087f8:	4602      	mov	r2, r0
 80087fa:	1c50      	adds	r0, r2, #1
 80087fc:	d1c9      	bne.n	8008792 <__sflush_r+0x32>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c6      	beq.n	8008792 <__sflush_r+0x32>
 8008804:	2b1d      	cmp	r3, #29
 8008806:	d001      	beq.n	800880c <__sflush_r+0xac>
 8008808:	2b16      	cmp	r3, #22
 800880a:	d11e      	bne.n	800884a <__sflush_r+0xea>
 800880c:	602f      	str	r7, [r5, #0]
 800880e:	2000      	movs	r0, #0
 8008810:	e022      	b.n	8008858 <__sflush_r+0xf8>
 8008812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008816:	b21b      	sxth	r3, r3
 8008818:	e01b      	b.n	8008852 <__sflush_r+0xf2>
 800881a:	690f      	ldr	r7, [r1, #16]
 800881c:	2f00      	cmp	r7, #0
 800881e:	d0f6      	beq.n	800880e <__sflush_r+0xae>
 8008820:	0793      	lsls	r3, r2, #30
 8008822:	680e      	ldr	r6, [r1, #0]
 8008824:	bf08      	it	eq
 8008826:	694b      	ldreq	r3, [r1, #20]
 8008828:	600f      	str	r7, [r1, #0]
 800882a:	bf18      	it	ne
 800882c:	2300      	movne	r3, #0
 800882e:	eba6 0807 	sub.w	r8, r6, r7
 8008832:	608b      	str	r3, [r1, #8]
 8008834:	f1b8 0f00 	cmp.w	r8, #0
 8008838:	dde9      	ble.n	800880e <__sflush_r+0xae>
 800883a:	6a21      	ldr	r1, [r4, #32]
 800883c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800883e:	4643      	mov	r3, r8
 8008840:	463a      	mov	r2, r7
 8008842:	4628      	mov	r0, r5
 8008844:	47b0      	blx	r6
 8008846:	2800      	cmp	r0, #0
 8008848:	dc08      	bgt.n	800885c <__sflush_r+0xfc>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	4407      	add	r7, r0
 800885e:	eba8 0800 	sub.w	r8, r8, r0
 8008862:	e7e7      	b.n	8008834 <__sflush_r+0xd4>
 8008864:	dfbffffe 	.word	0xdfbffffe

08008868 <_fflush_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	690b      	ldr	r3, [r1, #16]
 800886c:	4605      	mov	r5, r0
 800886e:	460c      	mov	r4, r1
 8008870:	b913      	cbnz	r3, 8008878 <_fflush_r+0x10>
 8008872:	2500      	movs	r5, #0
 8008874:	4628      	mov	r0, r5
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	b118      	cbz	r0, 8008882 <_fflush_r+0x1a>
 800887a:	6a03      	ldr	r3, [r0, #32]
 800887c:	b90b      	cbnz	r3, 8008882 <_fflush_r+0x1a>
 800887e:	f000 f8bb 	bl	80089f8 <__sinit>
 8008882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f3      	beq.n	8008872 <_fflush_r+0xa>
 800888a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800888c:	07d0      	lsls	r0, r2, #31
 800888e:	d404      	bmi.n	800889a <_fflush_r+0x32>
 8008890:	0599      	lsls	r1, r3, #22
 8008892:	d402      	bmi.n	800889a <_fflush_r+0x32>
 8008894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008896:	f000 fa94 	bl	8008dc2 <__retarget_lock_acquire_recursive>
 800889a:	4628      	mov	r0, r5
 800889c:	4621      	mov	r1, r4
 800889e:	f7ff ff5f 	bl	8008760 <__sflush_r>
 80088a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a4:	07da      	lsls	r2, r3, #31
 80088a6:	4605      	mov	r5, r0
 80088a8:	d4e4      	bmi.n	8008874 <_fflush_r+0xc>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	059b      	lsls	r3, r3, #22
 80088ae:	d4e1      	bmi.n	8008874 <_fflush_r+0xc>
 80088b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b2:	f000 fa87 	bl	8008dc4 <__retarget_lock_release_recursive>
 80088b6:	e7dd      	b.n	8008874 <_fflush_r+0xc>

080088b8 <fflush>:
 80088b8:	4601      	mov	r1, r0
 80088ba:	b920      	cbnz	r0, 80088c6 <fflush+0xe>
 80088bc:	4a04      	ldr	r2, [pc, #16]	@ (80088d0 <fflush+0x18>)
 80088be:	4905      	ldr	r1, [pc, #20]	@ (80088d4 <fflush+0x1c>)
 80088c0:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <fflush+0x20>)
 80088c2:	f000 b8b1 	b.w	8008a28 <_fwalk_sglue>
 80088c6:	4b05      	ldr	r3, [pc, #20]	@ (80088dc <fflush+0x24>)
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bfcd 	b.w	8008868 <_fflush_r>
 80088ce:	bf00      	nop
 80088d0:	20000024 	.word	0x20000024
 80088d4:	08008869 	.word	0x08008869
 80088d8:	20000034 	.word	0x20000034
 80088dc:	20000030 	.word	0x20000030

080088e0 <std>:
 80088e0:	2300      	movs	r3, #0
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	e9c0 3300 	strd	r3, r3, [r0]
 80088ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ee:	6083      	str	r3, [r0, #8]
 80088f0:	8181      	strh	r1, [r0, #12]
 80088f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80088f4:	81c2      	strh	r2, [r0, #14]
 80088f6:	6183      	str	r3, [r0, #24]
 80088f8:	4619      	mov	r1, r3
 80088fa:	2208      	movs	r2, #8
 80088fc:	305c      	adds	r0, #92	@ 0x5c
 80088fe:	f000 f9e7 	bl	8008cd0 <memset>
 8008902:	4b0d      	ldr	r3, [pc, #52]	@ (8008938 <std+0x58>)
 8008904:	6263      	str	r3, [r4, #36]	@ 0x24
 8008906:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <std+0x5c>)
 8008908:	62a3      	str	r3, [r4, #40]	@ 0x28
 800890a:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <std+0x60>)
 800890c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <std+0x64>)
 8008910:	6323      	str	r3, [r4, #48]	@ 0x30
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <std+0x68>)
 8008914:	6224      	str	r4, [r4, #32]
 8008916:	429c      	cmp	r4, r3
 8008918:	d006      	beq.n	8008928 <std+0x48>
 800891a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800891e:	4294      	cmp	r4, r2
 8008920:	d002      	beq.n	8008928 <std+0x48>
 8008922:	33d0      	adds	r3, #208	@ 0xd0
 8008924:	429c      	cmp	r4, r3
 8008926:	d105      	bne.n	8008934 <std+0x54>
 8008928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800892c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008930:	f000 ba46 	b.w	8008dc0 <__retarget_lock_init_recursive>
 8008934:	bd10      	pop	{r4, pc}
 8008936:	bf00      	nop
 8008938:	08008b21 	.word	0x08008b21
 800893c:	08008b43 	.word	0x08008b43
 8008940:	08008b7b 	.word	0x08008b7b
 8008944:	08008b9f 	.word	0x08008b9f
 8008948:	200045f8 	.word	0x200045f8

0800894c <stdio_exit_handler>:
 800894c:	4a02      	ldr	r2, [pc, #8]	@ (8008958 <stdio_exit_handler+0xc>)
 800894e:	4903      	ldr	r1, [pc, #12]	@ (800895c <stdio_exit_handler+0x10>)
 8008950:	4803      	ldr	r0, [pc, #12]	@ (8008960 <stdio_exit_handler+0x14>)
 8008952:	f000 b869 	b.w	8008a28 <_fwalk_sglue>
 8008956:	bf00      	nop
 8008958:	20000024 	.word	0x20000024
 800895c:	08008869 	.word	0x08008869
 8008960:	20000034 	.word	0x20000034

08008964 <cleanup_stdio>:
 8008964:	6841      	ldr	r1, [r0, #4]
 8008966:	4b0c      	ldr	r3, [pc, #48]	@ (8008998 <cleanup_stdio+0x34>)
 8008968:	4299      	cmp	r1, r3
 800896a:	b510      	push	{r4, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	d001      	beq.n	8008974 <cleanup_stdio+0x10>
 8008970:	f7ff ff7a 	bl	8008868 <_fflush_r>
 8008974:	68a1      	ldr	r1, [r4, #8]
 8008976:	4b09      	ldr	r3, [pc, #36]	@ (800899c <cleanup_stdio+0x38>)
 8008978:	4299      	cmp	r1, r3
 800897a:	d002      	beq.n	8008982 <cleanup_stdio+0x1e>
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff73 	bl	8008868 <_fflush_r>
 8008982:	68e1      	ldr	r1, [r4, #12]
 8008984:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <cleanup_stdio+0x3c>)
 8008986:	4299      	cmp	r1, r3
 8008988:	d004      	beq.n	8008994 <cleanup_stdio+0x30>
 800898a:	4620      	mov	r0, r4
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	f7ff bf6a 	b.w	8008868 <_fflush_r>
 8008994:	bd10      	pop	{r4, pc}
 8008996:	bf00      	nop
 8008998:	200045f8 	.word	0x200045f8
 800899c:	20004660 	.word	0x20004660
 80089a0:	200046c8 	.word	0x200046c8

080089a4 <global_stdio_init.part.0>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <global_stdio_init.part.0+0x30>)
 80089a8:	4c0b      	ldr	r4, [pc, #44]	@ (80089d8 <global_stdio_init.part.0+0x34>)
 80089aa:	4a0c      	ldr	r2, [pc, #48]	@ (80089dc <global_stdio_init.part.0+0x38>)
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	4620      	mov	r0, r4
 80089b0:	2200      	movs	r2, #0
 80089b2:	2104      	movs	r1, #4
 80089b4:	f7ff ff94 	bl	80088e0 <std>
 80089b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089bc:	2201      	movs	r2, #1
 80089be:	2109      	movs	r1, #9
 80089c0:	f7ff ff8e 	bl	80088e0 <std>
 80089c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089c8:	2202      	movs	r2, #2
 80089ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ce:	2112      	movs	r1, #18
 80089d0:	f7ff bf86 	b.w	80088e0 <std>
 80089d4:	20004730 	.word	0x20004730
 80089d8:	200045f8 	.word	0x200045f8
 80089dc:	0800894d 	.word	0x0800894d

080089e0 <__sfp_lock_acquire>:
 80089e0:	4801      	ldr	r0, [pc, #4]	@ (80089e8 <__sfp_lock_acquire+0x8>)
 80089e2:	f000 b9ee 	b.w	8008dc2 <__retarget_lock_acquire_recursive>
 80089e6:	bf00      	nop
 80089e8:	20004739 	.word	0x20004739

080089ec <__sfp_lock_release>:
 80089ec:	4801      	ldr	r0, [pc, #4]	@ (80089f4 <__sfp_lock_release+0x8>)
 80089ee:	f000 b9e9 	b.w	8008dc4 <__retarget_lock_release_recursive>
 80089f2:	bf00      	nop
 80089f4:	20004739 	.word	0x20004739

080089f8 <__sinit>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	f7ff fff0 	bl	80089e0 <__sfp_lock_acquire>
 8008a00:	6a23      	ldr	r3, [r4, #32]
 8008a02:	b11b      	cbz	r3, 8008a0c <__sinit+0x14>
 8008a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a08:	f7ff bff0 	b.w	80089ec <__sfp_lock_release>
 8008a0c:	4b04      	ldr	r3, [pc, #16]	@ (8008a20 <__sinit+0x28>)
 8008a0e:	6223      	str	r3, [r4, #32]
 8008a10:	4b04      	ldr	r3, [pc, #16]	@ (8008a24 <__sinit+0x2c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1f5      	bne.n	8008a04 <__sinit+0xc>
 8008a18:	f7ff ffc4 	bl	80089a4 <global_stdio_init.part.0>
 8008a1c:	e7f2      	b.n	8008a04 <__sinit+0xc>
 8008a1e:	bf00      	nop
 8008a20:	08008965 	.word	0x08008965
 8008a24:	20004730 	.word	0x20004730

08008a28 <_fwalk_sglue>:
 8008a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4688      	mov	r8, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	2600      	movs	r6, #0
 8008a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a38:	f1b9 0901 	subs.w	r9, r9, #1
 8008a3c:	d505      	bpl.n	8008a4a <_fwalk_sglue+0x22>
 8008a3e:	6824      	ldr	r4, [r4, #0]
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	d1f7      	bne.n	8008a34 <_fwalk_sglue+0xc>
 8008a44:	4630      	mov	r0, r6
 8008a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d907      	bls.n	8008a60 <_fwalk_sglue+0x38>
 8008a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a54:	3301      	adds	r3, #1
 8008a56:	d003      	beq.n	8008a60 <_fwalk_sglue+0x38>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c0      	blx	r8
 8008a5e:	4306      	orrs	r6, r0
 8008a60:	3568      	adds	r5, #104	@ 0x68
 8008a62:	e7e9      	b.n	8008a38 <_fwalk_sglue+0x10>

08008a64 <_puts_r>:
 8008a64:	6a03      	ldr	r3, [r0, #32]
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	6884      	ldr	r4, [r0, #8]
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	460e      	mov	r6, r1
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_puts_r+0x10>
 8008a70:	f7ff ffc2 	bl	80089f8 <__sinit>
 8008a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a76:	07db      	lsls	r3, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_puts_r+0x22>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	0598      	lsls	r0, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_puts_r+0x22>
 8008a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a82:	f000 f99e 	bl	8008dc2 <__retarget_lock_acquire_recursive>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	0719      	lsls	r1, r3, #28
 8008a8a:	d502      	bpl.n	8008a92 <_puts_r+0x2e>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d135      	bne.n	8008afe <_puts_r+0x9a>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f8c5 	bl	8008c24 <__swsetup_r>
 8008a9a:	b380      	cbz	r0, 8008afe <_puts_r+0x9a>
 8008a9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_puts_r+0x4e>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_puts_r+0x4e>
 8008aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aae:	f000 f989 	bl	8008dc4 <__retarget_lock_release_recursive>
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da04      	bge.n	8008ac4 <_puts_r+0x60>
 8008aba:	69a2      	ldr	r2, [r4, #24]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	dc17      	bgt.n	8008af0 <_puts_r+0x8c>
 8008ac0:	290a      	cmp	r1, #10
 8008ac2:	d015      	beq.n	8008af0 <_puts_r+0x8c>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	6022      	str	r2, [r4, #0]
 8008aca:	7019      	strb	r1, [r3, #0]
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d1ed      	bne.n	8008ab6 <_puts_r+0x52>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	da11      	bge.n	8008b02 <_puts_r+0x9e>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	210a      	movs	r1, #10
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f85f 	bl	8008ba6 <__swbuf_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d0d7      	beq.n	8008a9c <_puts_r+0x38>
 8008aec:	250a      	movs	r5, #10
 8008aee:	e7d7      	b.n	8008aa0 <_puts_r+0x3c>
 8008af0:	4622      	mov	r2, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f857 	bl	8008ba6 <__swbuf_r>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d1e7      	bne.n	8008acc <_puts_r+0x68>
 8008afc:	e7ce      	b.n	8008a9c <_puts_r+0x38>
 8008afe:	3e01      	subs	r6, #1
 8008b00:	e7e4      	b.n	8008acc <_puts_r+0x68>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	220a      	movs	r2, #10
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e7ee      	b.n	8008aec <_puts_r+0x88>
	...

08008b10 <puts>:
 8008b10:	4b02      	ldr	r3, [pc, #8]	@ (8008b1c <puts+0xc>)
 8008b12:	4601      	mov	r1, r0
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	f7ff bfa5 	b.w	8008a64 <_puts_r>
 8008b1a:	bf00      	nop
 8008b1c:	20000030 	.word	0x20000030

08008b20 <__sread>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	f000 f8fc 	bl	8008d24 <_read_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bfab      	itete	ge
 8008b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b32:	89a3      	ldrhlt	r3, [r4, #12]
 8008b34:	181b      	addge	r3, r3, r0
 8008b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3a:	bfac      	ite	ge
 8008b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b3e:	81a3      	strhlt	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__swrite>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	461f      	mov	r7, r3
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	05db      	lsls	r3, r3, #23
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4616      	mov	r6, r2
 8008b52:	d505      	bpl.n	8008b60 <__swrite+0x1e>
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f000 f8d0 	bl	8008d00 <_lseek_r>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4628      	mov	r0, r5
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	f000 b8e7 	b.w	8008d48 <_write_r>

08008b7a <__sseek>:
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 f8bd 	bl	8008d00 <_lseek_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	bf15      	itete	ne
 8008b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b96:	81a3      	strheq	r3, [r4, #12]
 8008b98:	bf18      	it	ne
 8008b9a:	81a3      	strhne	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__sclose>:
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 b89d 	b.w	8008ce0 <_close_r>

08008ba6 <__swbuf_r>:
 8008ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba8:	460e      	mov	r6, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4605      	mov	r5, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <__swbuf_r+0x12>
 8008bb0:	6a03      	ldr	r3, [r0, #32]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <__swbuf_r+0x12>
 8008bb4:	f7ff ff20 	bl	80089f8 <__sinit>
 8008bb8:	69a3      	ldr	r3, [r4, #24]
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	d501      	bpl.n	8008bc6 <__swbuf_r+0x20>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	b943      	cbnz	r3, 8008bd8 <__swbuf_r+0x32>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 f82b 	bl	8008c24 <__swsetup_r>
 8008bce:	b118      	cbz	r0, 8008bd8 <__swbuf_r+0x32>
 8008bd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	1a98      	subs	r0, r3, r2
 8008bde:	6963      	ldr	r3, [r4, #20]
 8008be0:	b2f6      	uxtb	r6, r6
 8008be2:	4283      	cmp	r3, r0
 8008be4:	4637      	mov	r7, r6
 8008be6:	dc05      	bgt.n	8008bf4 <__swbuf_r+0x4e>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7ff fe3c 	bl	8008868 <_fflush_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1ed      	bne.n	8008bd0 <__swbuf_r+0x2a>
 8008bf4:	68a3      	ldr	r3, [r4, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	701e      	strb	r6, [r3, #0]
 8008c02:	6962      	ldr	r2, [r4, #20]
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d004      	beq.n	8008c14 <__swbuf_r+0x6e>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d5e1      	bpl.n	8008bd4 <__swbuf_r+0x2e>
 8008c10:	2e0a      	cmp	r6, #10
 8008c12:	d1df      	bne.n	8008bd4 <__swbuf_r+0x2e>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7ff fe26 	bl	8008868 <_fflush_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0d9      	beq.n	8008bd4 <__swbuf_r+0x2e>
 8008c20:	e7d6      	b.n	8008bd0 <__swbuf_r+0x2a>
	...

08008c24 <__swsetup_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4b29      	ldr	r3, [pc, #164]	@ (8008ccc <__swsetup_r+0xa8>)
 8008c28:	4605      	mov	r5, r0
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	b118      	cbz	r0, 8008c38 <__swsetup_r+0x14>
 8008c30:	6a03      	ldr	r3, [r0, #32]
 8008c32:	b90b      	cbnz	r3, 8008c38 <__swsetup_r+0x14>
 8008c34:	f7ff fee0 	bl	80089f8 <__sinit>
 8008c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3c:	0719      	lsls	r1, r3, #28
 8008c3e:	d422      	bmi.n	8008c86 <__swsetup_r+0x62>
 8008c40:	06da      	lsls	r2, r3, #27
 8008c42:	d407      	bmi.n	8008c54 <__swsetup_r+0x30>
 8008c44:	2209      	movs	r2, #9
 8008c46:	602a      	str	r2, [r5, #0]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c52:	e033      	b.n	8008cbc <__swsetup_r+0x98>
 8008c54:	0758      	lsls	r0, r3, #29
 8008c56:	d512      	bpl.n	8008c7e <__swsetup_r+0x5a>
 8008c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5a:	b141      	cbz	r1, 8008c6e <__swsetup_r+0x4a>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__swsetup_r+0x46>
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 f8af 	bl	8008dc8 <_free_r>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0308 	orr.w	r3, r3, #8
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	b94b      	cbnz	r3, 8008c9e <__swsetup_r+0x7a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c94:	d003      	beq.n	8008c9e <__swsetup_r+0x7a>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f000 f9b3 	bl	8009004 <__smakebuf_r>
 8008c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca2:	f013 0201 	ands.w	r2, r3, #1
 8008ca6:	d00a      	beq.n	8008cbe <__swsetup_r+0x9a>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	60a2      	str	r2, [r4, #8]
 8008cac:	6962      	ldr	r2, [r4, #20]
 8008cae:	4252      	negs	r2, r2
 8008cb0:	61a2      	str	r2, [r4, #24]
 8008cb2:	6922      	ldr	r2, [r4, #16]
 8008cb4:	b942      	cbnz	r2, 8008cc8 <__swsetup_r+0xa4>
 8008cb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cba:	d1c5      	bne.n	8008c48 <__swsetup_r+0x24>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	0799      	lsls	r1, r3, #30
 8008cc0:	bf58      	it	pl
 8008cc2:	6962      	ldrpl	r2, [r4, #20]
 8008cc4:	60a2      	str	r2, [r4, #8]
 8008cc6:	e7f4      	b.n	8008cb2 <__swsetup_r+0x8e>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7f7      	b.n	8008cbc <__swsetup_r+0x98>
 8008ccc:	20000030 	.word	0x20000030

08008cd0 <memset>:
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <_close_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d06      	ldr	r5, [pc, #24]	@ (8008cfc <_close_r+0x1c>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	f7f8 fff3 	bl	8001cd6 <_close>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_close_r+0x1a>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_close_r+0x1a>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20004734 	.word	0x20004734

08008d00 <_lseek_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d07      	ldr	r5, [pc, #28]	@ (8008d20 <_lseek_r+0x20>)
 8008d04:	4604      	mov	r4, r0
 8008d06:	4608      	mov	r0, r1
 8008d08:	4611      	mov	r1, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	602a      	str	r2, [r5, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f7f9 f808 	bl	8001d24 <_lseek>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_lseek_r+0x1e>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_lseek_r+0x1e>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20004734 	.word	0x20004734

08008d24 <_read_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	@ (8008d44 <_read_r+0x20>)
 8008d28:	4604      	mov	r4, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7f8 ffb2 	bl	8001c9c <_read>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_read_r+0x1e>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_read_r+0x1e>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20004734 	.word	0x20004734

08008d48 <_write_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	@ (8008d68 <_write_r+0x20>)
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	4608      	mov	r0, r1
 8008d50:	4611      	mov	r1, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	602a      	str	r2, [r5, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f7f8 f8b1 	bl	8000ebe <_write>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_write_r+0x1e>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_write_r+0x1e>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20004734 	.word	0x20004734

08008d6c <__errno>:
 8008d6c:	4b01      	ldr	r3, [pc, #4]	@ (8008d74 <__errno+0x8>)
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000030 	.word	0x20000030

08008d78 <__libc_init_array>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008db0 <__libc_init_array+0x38>)
 8008d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008db4 <__libc_init_array+0x3c>)
 8008d7e:	1b64      	subs	r4, r4, r5
 8008d80:	10a4      	asrs	r4, r4, #2
 8008d82:	2600      	movs	r6, #0
 8008d84:	42a6      	cmp	r6, r4
 8008d86:	d109      	bne.n	8008d9c <__libc_init_array+0x24>
 8008d88:	4d0b      	ldr	r5, [pc, #44]	@ (8008db8 <__libc_init_array+0x40>)
 8008d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008dbc <__libc_init_array+0x44>)
 8008d8c:	f000 f9a8 	bl	80090e0 <_init>
 8008d90:	1b64      	subs	r4, r4, r5
 8008d92:	10a4      	asrs	r4, r4, #2
 8008d94:	2600      	movs	r6, #0
 8008d96:	42a6      	cmp	r6, r4
 8008d98:	d105      	bne.n	8008da6 <__libc_init_array+0x2e>
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da0:	4798      	blx	r3
 8008da2:	3601      	adds	r6, #1
 8008da4:	e7ee      	b.n	8008d84 <__libc_init_array+0xc>
 8008da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008daa:	4798      	blx	r3
 8008dac:	3601      	adds	r6, #1
 8008dae:	e7f2      	b.n	8008d96 <__libc_init_array+0x1e>
 8008db0:	0800923c 	.word	0x0800923c
 8008db4:	0800923c 	.word	0x0800923c
 8008db8:	0800923c 	.word	0x0800923c
 8008dbc:	08009240 	.word	0x08009240

08008dc0 <__retarget_lock_init_recursive>:
 8008dc0:	4770      	bx	lr

08008dc2 <__retarget_lock_acquire_recursive>:
 8008dc2:	4770      	bx	lr

08008dc4 <__retarget_lock_release_recursive>:
 8008dc4:	4770      	bx	lr
	...

08008dc8 <_free_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4605      	mov	r5, r0
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	d041      	beq.n	8008e54 <_free_r+0x8c>
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f0c      	subs	r4, r1, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfb8      	it	lt
 8008dda:	18e4      	addlt	r4, r4, r3
 8008ddc:	f000 f8e0 	bl	8008fa0 <__malloc_lock>
 8008de0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e58 <_free_r+0x90>)
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	b933      	cbnz	r3, 8008df4 <_free_r+0x2c>
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	4628      	mov	r0, r5
 8008dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008df0:	f000 b8dc 	b.w	8008fac <__malloc_unlock>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d908      	bls.n	8008e0a <_free_r+0x42>
 8008df8:	6820      	ldr	r0, [r4, #0]
 8008dfa:	1821      	adds	r1, r4, r0
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf01      	itttt	eq
 8008e00:	6819      	ldreq	r1, [r3, #0]
 8008e02:	685b      	ldreq	r3, [r3, #4]
 8008e04:	1809      	addeq	r1, r1, r0
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	e7ed      	b.n	8008de6 <_free_r+0x1e>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x4c>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x42>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1850      	adds	r0, r2, r1
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x6c>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	4401      	add	r1, r0
 8008e20:	1850      	adds	r0, r2, r1
 8008e22:	4283      	cmp	r3, r0
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1e0      	bne.n	8008dea <_free_r+0x22>
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4408      	add	r0, r1
 8008e30:	6010      	str	r0, [r2, #0]
 8008e32:	e7da      	b.n	8008dea <_free_r+0x22>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x74>
 8008e36:	230c      	movs	r3, #12
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	e7d6      	b.n	8008dea <_free_r+0x22>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	1821      	adds	r1, r4, r0
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1809      	addeq	r1, r1, r0
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7ca      	b.n	8008dea <_free_r+0x22>
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	20004740 	.word	0x20004740

08008e5c <sbrk_aligned>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008e9c <sbrk_aligned+0x40>)
 8008e60:	460c      	mov	r4, r1
 8008e62:	6831      	ldr	r1, [r6, #0]
 8008e64:	4605      	mov	r5, r0
 8008e66:	b911      	cbnz	r1, 8008e6e <sbrk_aligned+0x12>
 8008e68:	f000 f92a 	bl	80090c0 <_sbrk_r>
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 f925 	bl	80090c0 <_sbrk_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d103      	bne.n	8008e82 <sbrk_aligned+0x26>
 8008e7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008e7e:	4620      	mov	r0, r4
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	1cc4      	adds	r4, r0, #3
 8008e84:	f024 0403 	bic.w	r4, r4, #3
 8008e88:	42a0      	cmp	r0, r4
 8008e8a:	d0f8      	beq.n	8008e7e <sbrk_aligned+0x22>
 8008e8c:	1a21      	subs	r1, r4, r0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f916 	bl	80090c0 <_sbrk_r>
 8008e94:	3001      	adds	r0, #1
 8008e96:	d1f2      	bne.n	8008e7e <sbrk_aligned+0x22>
 8008e98:	e7ef      	b.n	8008e7a <sbrk_aligned+0x1e>
 8008e9a:	bf00      	nop
 8008e9c:	2000473c 	.word	0x2000473c

08008ea0 <_malloc_r>:
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	1ccd      	adds	r5, r1, #3
 8008ea6:	f025 0503 	bic.w	r5, r5, #3
 8008eaa:	3508      	adds	r5, #8
 8008eac:	2d0c      	cmp	r5, #12
 8008eae:	bf38      	it	cc
 8008eb0:	250c      	movcc	r5, #12
 8008eb2:	2d00      	cmp	r5, #0
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	db01      	blt.n	8008ebc <_malloc_r+0x1c>
 8008eb8:	42a9      	cmp	r1, r5
 8008eba:	d904      	bls.n	8008ec6 <_malloc_r+0x26>
 8008ebc:	230c      	movs	r3, #12
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f9c <_malloc_r+0xfc>
 8008eca:	f000 f869 	bl	8008fa0 <__malloc_lock>
 8008ece:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed2:	461c      	mov	r4, r3
 8008ed4:	bb44      	cbnz	r4, 8008f28 <_malloc_r+0x88>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ffbf 	bl	8008e5c <sbrk_aligned>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	d158      	bne.n	8008f96 <_malloc_r+0xf6>
 8008ee4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee8:	4627      	mov	r7, r4
 8008eea:	2f00      	cmp	r7, #0
 8008eec:	d143      	bne.n	8008f76 <_malloc_r+0xd6>
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d04b      	beq.n	8008f8a <_malloc_r+0xea>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	eb04 0903 	add.w	r9, r4, r3
 8008efc:	f000 f8e0 	bl	80090c0 <_sbrk_r>
 8008f00:	4581      	cmp	r9, r0
 8008f02:	d142      	bne.n	8008f8a <_malloc_r+0xea>
 8008f04:	6821      	ldr	r1, [r4, #0]
 8008f06:	1a6d      	subs	r5, r5, r1
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ffa6 	bl	8008e5c <sbrk_aligned>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d03a      	beq.n	8008f8a <_malloc_r+0xea>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	442b      	add	r3, r5
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	bb62      	cbnz	r2, 8008f7c <_malloc_r+0xdc>
 8008f22:	f8c8 7000 	str.w	r7, [r8]
 8008f26:	e00f      	b.n	8008f48 <_malloc_r+0xa8>
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	1b52      	subs	r2, r2, r5
 8008f2c:	d420      	bmi.n	8008f70 <_malloc_r+0xd0>
 8008f2e:	2a0b      	cmp	r2, #11
 8008f30:	d917      	bls.n	8008f62 <_malloc_r+0xc2>
 8008f32:	1961      	adds	r1, r4, r5
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	6025      	str	r5, [r4, #0]
 8008f38:	bf18      	it	ne
 8008f3a:	6059      	strne	r1, [r3, #4]
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	bf08      	it	eq
 8008f40:	f8c8 1000 	streq.w	r1, [r8]
 8008f44:	5162      	str	r2, [r4, r5]
 8008f46:	604b      	str	r3, [r1, #4]
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 f82f 	bl	8008fac <__malloc_unlock>
 8008f4e:	f104 000b 	add.w	r0, r4, #11
 8008f52:	1d23      	adds	r3, r4, #4
 8008f54:	f020 0007 	bic.w	r0, r0, #7
 8008f58:	1ac2      	subs	r2, r0, r3
 8008f5a:	bf1c      	itt	ne
 8008f5c:	1a1b      	subne	r3, r3, r0
 8008f5e:	50a3      	strne	r3, [r4, r2]
 8008f60:	e7af      	b.n	8008ec2 <_malloc_r+0x22>
 8008f62:	6862      	ldr	r2, [r4, #4]
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	bf0c      	ite	eq
 8008f68:	f8c8 2000 	streq.w	r2, [r8]
 8008f6c:	605a      	strne	r2, [r3, #4]
 8008f6e:	e7eb      	b.n	8008f48 <_malloc_r+0xa8>
 8008f70:	4623      	mov	r3, r4
 8008f72:	6864      	ldr	r4, [r4, #4]
 8008f74:	e7ae      	b.n	8008ed4 <_malloc_r+0x34>
 8008f76:	463c      	mov	r4, r7
 8008f78:	687f      	ldr	r7, [r7, #4]
 8008f7a:	e7b6      	b.n	8008eea <_malloc_r+0x4a>
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	d1fb      	bne.n	8008f7c <_malloc_r+0xdc>
 8008f84:	2300      	movs	r3, #0
 8008f86:	6053      	str	r3, [r2, #4]
 8008f88:	e7de      	b.n	8008f48 <_malloc_r+0xa8>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	6033      	str	r3, [r6, #0]
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 f80c 	bl	8008fac <__malloc_unlock>
 8008f94:	e794      	b.n	8008ec0 <_malloc_r+0x20>
 8008f96:	6005      	str	r5, [r0, #0]
 8008f98:	e7d6      	b.n	8008f48 <_malloc_r+0xa8>
 8008f9a:	bf00      	nop
 8008f9c:	20004740 	.word	0x20004740

08008fa0 <__malloc_lock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	@ (8008fa8 <__malloc_lock+0x8>)
 8008fa2:	f7ff bf0e 	b.w	8008dc2 <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20004738 	.word	0x20004738

08008fac <__malloc_unlock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	@ (8008fb4 <__malloc_unlock+0x8>)
 8008fae:	f7ff bf09 	b.w	8008dc4 <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20004738 	.word	0x20004738

08008fb8 <__swhatbuf_r>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	460c      	mov	r4, r1
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	b096      	sub	sp, #88	@ 0x58
 8008fc4:	4615      	mov	r5, r2
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	da0d      	bge.n	8008fe6 <__swhatbuf_r+0x2e>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fd0:	f04f 0100 	mov.w	r1, #0
 8008fd4:	bf14      	ite	ne
 8008fd6:	2340      	movne	r3, #64	@ 0x40
 8008fd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fdc:	2000      	movs	r0, #0
 8008fde:	6031      	str	r1, [r6, #0]
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	b016      	add	sp, #88	@ 0x58
 8008fe4:	bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	466a      	mov	r2, sp
 8008fe8:	f000 f848 	bl	800907c <_fstat_r>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dbec      	blt.n	8008fca <__swhatbuf_r+0x12>
 8008ff0:	9901      	ldr	r1, [sp, #4]
 8008ff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ffa:	4259      	negs	r1, r3
 8008ffc:	4159      	adcs	r1, r3
 8008ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009002:	e7eb      	b.n	8008fdc <__swhatbuf_r+0x24>

08009004 <__smakebuf_r>:
 8009004:	898b      	ldrh	r3, [r1, #12]
 8009006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009008:	079d      	lsls	r5, r3, #30
 800900a:	4606      	mov	r6, r0
 800900c:	460c      	mov	r4, r1
 800900e:	d507      	bpl.n	8009020 <__smakebuf_r+0x1c>
 8009010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	2301      	movs	r3, #1
 800901a:	6163      	str	r3, [r4, #20]
 800901c:	b003      	add	sp, #12
 800901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009020:	ab01      	add	r3, sp, #4
 8009022:	466a      	mov	r2, sp
 8009024:	f7ff ffc8 	bl	8008fb8 <__swhatbuf_r>
 8009028:	9f00      	ldr	r7, [sp, #0]
 800902a:	4605      	mov	r5, r0
 800902c:	4639      	mov	r1, r7
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff36 	bl	8008ea0 <_malloc_r>
 8009034:	b948      	cbnz	r0, 800904a <__smakebuf_r+0x46>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	059a      	lsls	r2, r3, #22
 800903c:	d4ee      	bmi.n	800901c <__smakebuf_r+0x18>
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	f043 0302 	orr.w	r3, r3, #2
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	e7e2      	b.n	8009010 <__smakebuf_r+0xc>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	6020      	str	r0, [r4, #0]
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800905a:	b15b      	cbz	r3, 8009074 <__smakebuf_r+0x70>
 800905c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009060:	4630      	mov	r0, r6
 8009062:	f000 f81d 	bl	80090a0 <_isatty_r>
 8009066:	b128      	cbz	r0, 8009074 <__smakebuf_r+0x70>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f023 0303 	bic.w	r3, r3, #3
 800906e:	f043 0301 	orr.w	r3, r3, #1
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	431d      	orrs	r5, r3
 8009078:	81a5      	strh	r5, [r4, #12]
 800907a:	e7cf      	b.n	800901c <__smakebuf_r+0x18>

0800907c <_fstat_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	@ (800909c <_fstat_r+0x20>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7f8 fe30 	bl	8001cee <_fstat>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_fstat_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_fstat_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	20004734 	.word	0x20004734

080090a0 <_isatty_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	@ (80090bc <_isatty_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fe2f 	bl	8001d0e <_isatty>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_isatty_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_isatty_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20004734 	.word	0x20004734

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	@ (80090dc <_sbrk_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 fe38 	bl	8001d40 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20004734 	.word	0x20004734

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
